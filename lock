local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")

local OrionLib = {
	Elements = {},
	ThemeObjects = {},
	Connections = {},
	Flags = {},
	ActiveContainer = nil, -- Keep track of active tab container
	Themes = {
		Default = {
			Main = Color3.fromRGB(25, 25, 25),
			Second = Color3.fromRGB(32, 32, 32),
			Stroke = Color3.fromRGB(60, 60, 60),
			Divider = Color3.fromRGB(60, 60, 60),
			Text = Color3.fromRGB(240, 240, 240),
			TextDark = Color3.fromRGB(150, 150, 150)
		},
		Viow = {
			Main = Color3.fromRGB(40, 40, 40),
			Second = Color3.fromRGB(58, 58, 58),
			Stroke = Color3.fromRGB(80, 80, 80),
			Divider = Color3.fromRGB(85, 85, 85),
			Text = Color3.fromRGB(255, 255, 255),
			TextDark = Color3.fromRGB(170, 170, 170)
		},
		Mars = {
			Main = Color3.fromRGB(30, 30, 30),
			Second = Color3.fromRGB(45, 45, 45),
			Stroke = Color3.fromRGB(90, 90, 90),
			Divider = Color3.fromRGB(95, 95, 95),
			Text = Color3.fromRGB(255, 85, 85),  -- Mars vibes üî•
			TextDark = Color3.fromRGB(200, 100, 100)
		},
		Modern = {
			Main = Color3.fromRGB(15, 15, 15),
			Second = Color3.fromRGB(22, 22, 22),
			Stroke = Color3.fromRGB(50, 50, 50),
			Divider = Color3.fromRGB(60, 60, 60),
			Text = Color3.fromRGB(200, 200, 200),
			TextDark = Color3.fromRGB(120, 120, 120)
		},
		Neon = {
			Main = Color3.fromRGB(15, 15, 15),
			Second = Color3.fromRGB(30, 30, 30),
			Stroke = Color3.fromRGB(50, 50, 50),
			Divider = Color3.fromRGB(55, 55, 55),
			Text = Color3.fromRGB(0, 255, 255),  -- Neon vibes üò±
			TextDark = Color3.fromRGB(0, 200, 200)
		},
		Ocean = {
			Main = Color3.fromRGB(18, 43, 69),
			Second = Color3.fromRGB(28, 60, 92),
			Stroke = Color3.fromRGB(56, 116, 184),
			Divider = Color3.fromRGB(58, 118, 190),
			Text = Color3.fromRGB(255, 255, 255),
			TextDark = Color3.fromRGB(180, 180, 180)
		},
		Cyberpunk = {
			Main = Color3.fromRGB(20, 20, 20),
			Second = Color3.fromRGB(40, 40, 40),
			Stroke = Color3.fromRGB(180, 40, 120),  -- Cyberpunk pink glow üòµ‚Äçüí´
			Divider = Color3.fromRGB(50, 50, 50),
			Text = Color3.fromRGB(0, 255, 255),
			TextDark = Color3.fromRGB(130, 255, 130)
		},
		Retro = {
			Main = Color3.fromRGB(55, 55, 55),
			Second = Color3.fromRGB(65, 65, 65),
			Stroke = Color3.fromRGB(90, 90, 90),
			Divider = Color3.fromRGB(100, 100, 100),
			Text = Color3.fromRGB(255, 200, 0),  -- Retro vibes üü®üí•
			TextDark = Color3.fromRGB(200, 150, 0)
		},
		DarkMode = {
			Main = Color3.fromRGB(10, 10, 10),
			Second = Color3.fromRGB(30, 30, 30),
			Stroke = Color3.fromRGB(40, 40, 40),
			Divider = Color3.fromRGB(50, 50, 50),
			Text = Color3.fromRGB(255, 255, 255),
			TextDark = Color3.fromRGB(170, 170, 170)
		},
		Midnight = {
			Main = Color3.fromRGB(8, 8, 8),
			Second = Color3.fromRGB(18, 18, 18),
			Stroke = Color3.fromRGB(48, 48, 48),
			Divider = Color3.fromRGB(58, 58, 58),
			Text = Color3.fromRGB(190, 190, 255),  -- Midnight blues üò¥‚ú®
			TextDark = Color3.fromRGB(120, 120, 180)
		},
		Galaxy = {
			Main = Color3.fromRGB(30, 30, 45),
			Second = Color3.fromRGB(50, 50, 80),
			Stroke = Color3.fromRGB(100, 100, 150),
			Divider = Color3.fromRGB(110, 110, 160),
			Text = Color3.fromRGB(255, 255, 255),
			TextDark = Color3.fromRGB(180, 180, 180)
		},
		Acidic = {
			Main = Color3.fromRGB(10, 100, 10),
			Second = Color3.fromRGB(30, 130, 30),
			Stroke = Color3.fromRGB(70, 180, 70),
			Divider = Color3.fromRGB(80, 200, 80),
			Text = Color3.fromRGB(255, 255, 255),
			TextDark = Color3.fromRGB(200, 200, 200)
		},
		Twilight = {
			Main = Color3.fromRGB(50, 50, 80),
			Second = Color3.fromRGB(70, 70, 110),
			Stroke = Color3.fromRGB(120, 120, 160),
			Divider = Color3.fromRGB(130, 130, 170),
			Text = Color3.fromRGB(200, 200, 255),
			TextDark = Color3.fromRGB(150, 150, 200)
		}
	},
	SelectedTheme = "Midnight", -- Changed Theme
	Folder = nil,
	SaveCfg = false
}



--Feather Icons https://github.com/evoincorp/lucideblox/tree/master/src/modules/util - Created by 7kayoh
local Icons = {}

local Success, Response = pcall(function()
	Icons = HttpService:JSONDecode(game:HttpGet("https://raw.githubusercontent.com/iconify/icon-sets/refs/heads/master/json/feather.json")).icons
end)

if not Success then
	warn("\nOrion Library - Failed to load Feather Icons. Error code: " .. Response .. "\n")
end

local function GetIcon(IconName)
	if IconName and Icons[IconName] ~= nil then -- Check if IconName is provided
		local svgData = Icons[IconName]
        -- Basic check if it resembles an SVG structure - assuming it just returns usable ID/data
        if type(svgData) == "table" and svgData.body and svgData.width and svgData.height then
             return svgData -- Assuming the original code knew how to handle this
		end
		return nil -- Return nil if it's not a recognized structure or simple icon name
	else
		return nil
	end
end
local Orion = Instance.new("ScreenGui")
Orion.Name = "Orion"
Orion.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Orion.Parent = game:GetService("CoreGui") or game:GetService("Players").LocalPlayer.PlayerGui

-- Remove any duplicate Orion GUIs in CoreGui
for _, Interface in ipairs((game:GetService("CoreGui") or game:GetService("Players").LocalPlayer.PlayerGui):GetChildren()) do
	if Interface.Name == Orion.Name and Interface ~= Orion then
		Interface:Destroy()
	end
end

-- Function to check if Orion is running
function OrionLib:IsRunning()
	return Orion and Orion.Parent ~= nil
end


local function AddConnection(Signal, Function)
	if (not OrionLib:IsRunning()) then
		return
	end
	local SignalConnect = Signal:Connect(Function)
	table.insert(OrionLib.Connections, SignalConnect)
	return SignalConnect
end

task.spawn(function()
	while (OrionLib:IsRunning()) do
		task.wait() -- Use task.wait() instead of wait()
	end

	for _, Connection in next, OrionLib.Connections do
		pcall(function() Connection:Disconnect() end) -- Safely disconnect
	end
	OrionLib.Connections = {} -- Clear connections table
end)

-- Reverted Dragging Functionality to original logic
local function AddDraggingFunctionality(DragPoint, Main)
	local Dragging, DragInput, MousePos, FramePos = false, nil, Vector2.new(), UDim2.new()

	AddConnection(DragPoint.InputBegan, function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
			Dragging = true
			MousePos = Input.Position
			FramePos = Main.Position

			local connChanged
			connChanged = AddConnection(Input.Changed, function()
				if Input.UserInputState == Enum.UserInputState.End then
					Dragging = false
					if connChanged then pcall(function() connChanged:Disconnect() end) end
				end
			end)
		end
	end)

	AddConnection(DragPoint.InputChanged, function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
			DragInput = Input
		end
	end)

	AddConnection(UserInputService.InputChanged, function(Input)
		if Input == DragInput and Dragging then
			local Delta = Input.Position - MousePos
            local newPosition = UDim2.new(FramePos.X.Scale,FramePos.X.Offset + Delta.X, FramePos.Y.Scale, FramePos.Y.Offset + Delta.Y)
            -- Original tween logic
			TweenService:Create(Main, TweenInfo.new(0.45, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = newPosition}):Play()
		end
	end)
end


local function Create(Name, Properties, Children)
	local Object = Instance.new(Name)
	for i, v in next, Properties or {} do
        pcall(function() Object[i] = v end) -- Safely set properties
	end
	for i, v in next, Children or {} do
		if v and typeof(v) == "Instance" then v.Parent = Object end -- Check child exists and is Instance before parenting
	end
	return Object
end

local function CreateElement(ElementName, ElementFunction)
	OrionLib.Elements[ElementName] = function(...)
		return ElementFunction(...)
	end
end

local function MakeElement(ElementName, ...)
    if OrionLib.Elements[ElementName] then
	    local NewElement = OrionLib.Elements[ElementName](...)
	    return NewElement
    else
        warn("Orion Library: Element '"..tostring(ElementName).."' does not exist.")
        return nil
    end
end

local function SetProps(Element, Props)
    if not Element then return nil end
	for Property, Value in pairs(Props or {}) do
        pcall(function() Element[Property] = Value end)
	end
	return Element
end

-- Modified SetChildren to prevent 'attempt to index number' error
local function SetChildren(Element, Children)
    if not Element then return nil end
	for _, Child in pairs(Children or {}) do
        if Child and typeof(Child) == "Instance" then -- Check if Child is a valid Instance
            Child.Parent = Element
        elseif Child ~= nil then
            -- Optionally warn if a non-instance value (other than nil) is found
            -- warn("Orion Library - SetChildren: Attempted to parent non-Instance:", Child, "to", Element:GetFullName())
        end
	end
	return Element
end


local function Round(Number, Factor)
    Factor = Factor or 1
	local Result = math.floor(Number/Factor + (math.sign(Number) * 0.5)) * Factor
	return Result
end

local function ReturnProperty(Object)
    if not Object or not Object:IsA("GuiObject") then return nil end -- Basic check
	local objType = typeof(Object)
	if objType == "Instance" then
		if Object:IsA("Frame") or Object:IsA("TextButton") or Object:IsA("TextBox") or Object:IsA("ImageButton") then
			return "BackgroundColor3"
		elseif Object:IsA("ScrollingFrame") then
			return "ScrollBarImageColor3"
		elseif Object:IsA("UIStroke") then
			return "Color"
		elseif Object:IsA("TextLabel") then
			return "TextColor3"
		elseif Object:IsA("ImageLabel") then
			return "ImageColor3"
		end
	end
	return nil -- Return nil if no property found
end

local function AddThemeObject(Object, Type)
    if not Object then return nil end -- Handle nil object gracefully
	if not OrionLib.ThemeObjects[Type] then
		OrionLib.ThemeObjects[Type] = {}
	end
	local PropertyName = ReturnProperty(Object)
	if PropertyName then
		table.insert(OrionLib.ThemeObjects[Type], Object)
		local themeColor = OrionLib.Themes[OrionLib.SelectedTheme][Type]
		if themeColor then
            pcall(function() Object[PropertyName] = themeColor end)
		else
			warn("Orion Library - Theme '" .. OrionLib.SelectedTheme .. "' missing color type: " .. Type)
		end
	else
		-- warn("Orion Library - Could not determine theme property for object: ", Object:GetFullName())
	end
	return Object
end

local function SetTheme()
    local currentThemeColors = OrionLib.Themes[OrionLib.SelectedTheme]
    if not currentThemeColors then
        warn("Orion Library - Selected theme '"..OrionLib.SelectedTheme.."' not found.")
        return
    end

	for Name, TypeObjects in pairs(OrionLib.ThemeObjects) do
        local themeColor = currentThemeColors[Name]
        if themeColor then
            local itemsToRemove = {}
		    for index, Object in ipairs(TypeObjects) do
                if not Object or not Object.Parent then -- Check if object still exists
                    table.insert(itemsToRemove, index)
                    continue
                end
			    local PropertyName = ReturnProperty(Object)
			    if PropertyName then
                    pcall(function() Object[PropertyName] = themeColor end)
			    end
		    end
            -- Remove invalid objects safely
            for i = #itemsToRemove, 1, -1 do
                table.remove(TypeObjects, itemsToRemove[i])
            end
        else
            warn("Orion Library - Color type '"..Name.."' not found in selected theme '"..OrionLib.SelectedTheme.."'")
        end
	end
end


local function PackColor(Color)
	return {R = math.floor(Color.R * 255 + 0.5), G = math.floor(Color.G * 255 + 0.5), B = math.floor(Color.B * 255 + 0.5)}
end

local function UnpackColor(Color)
	if Color and typeof(Color) == "table" and Color.R and Color.G and Color.B then
        -- Ensure values are within 0-255 range after unpacking
		return Color3.fromRGB(math.clamp(Color.R, 0, 255), math.clamp(Color.G, 0, 255), math.clamp(Color.B, 0, 255))
	end
	warn("Orion Library Config Loader - Invalid color format found in config:", Color)
	return Color3.fromRGB(255, 255, 255) -- Return default white on error
end

local function LoadCfg(Config)
	local Success, Data = pcall(HttpService.JSONDecode, HttpService, Config)
	if not Success then
		warn("Orion Library Config Loader - Failed to decode config data:", Data)
		return
	end

	if typeof(Data) ~= "table" then
		warn("Orion Library Config Loader - Decoded config data is not a table.")
		return
	end

	for a,b in pairs(Data) do
		if OrionLib.Flags[a] then
			task.spawn(function() -- Use task.spawn
				local flag = OrionLib.Flags[a]
				local valueToSet = b
                pcall(function() -- Wrap the setting logic in pcall
				    if flag.Type == "Colorpicker" then
					    valueToSet = UnpackColor(b)
                    elseif flag.Type == "Bind" then
                        local keyName = tostring(b)
                        -- Attempt to convert string back to Enum.KeyCode/UserInputType if possible
                        local keyEnum = Enum.KeyCode[keyName] or Enum.UserInputType[keyName] or Enum.KeyCode.None -- Default to None
                        valueToSet = keyEnum
				    end
                    if flag.Set and typeof(flag.Set) == "function" then
                        flag:Set(valueToSet, true) -- Pass true to indicate it's from loading
                    else
                        -- Fallback for older flags without Set method?
                        flag.Value = valueToSet
                        -- Manually trigger update for elements that need it (e.g., toggle visual)
                        if flag.UpdateVisual then flag:UpdateVisual() end
                    end
                end)
			end)
		else
			warn("Orion Library Config Loader - Could not find flag definition for saved key: ", a)
		end
	end
end


local function SaveCfg(Name)
	if not OrionLib.SaveCfg or not OrionLib.Folder then return end -- Check if saving is enabled

	local Data = {}
	for i,v in pairs(OrionLib.Flags) do
		if v.Save then
            local valueToSave = v.Value
            if valueToSave ~= nil then -- Check if value is not nil before proceeding
			    if v.Type == "Colorpicker" then
				    valueToSave = PackColor(valueToSave)
                elseif v.Type == "Bind" then
                    -- Save the name of the enum
                    if typeof(valueToSave) == "EnumItem" then
                        valueToSave = valueToSave.Name
                    else
                        valueToSave = tostring(valueToSave) -- Fallback (should ideally be Enum.KeyCode.None.Name)
                    end
			    end
                Data[i] = valueToSave
            end -- End nil check
		end
	end

    local success, encodedData = pcall(HttpService.JSONEncode, HttpService, Data)
    if success then
	    local successWrite, errorMsg = pcall(writefile, OrionLib.Folder .. "/" .. Name .. ".txt", encodedData)
        if not successWrite then
             warn("Orion Library Config Saver - Failed to write config file:", errorMsg)
        end
    else
         warn("Orion Library Config Saver - Failed to encode config data:", encodedData)
    end
end


local WhitelistedMouse = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2,Enum.UserInputType.MouseButton3}
local BlacklistedKeys = {Enum.KeyCode.Unknown,Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D,Enum.KeyCode.Up,Enum.KeyCode.Left,Enum.KeyCode.Down,Enum.KeyCode.Right,Enum.KeyCode.Slash,Enum.KeyCode.Tab,Enum.KeyCode.Backspace,Enum.KeyCode.Escape}

local function CheckKey(Table, Key)
	for _, v in next, Table do
		if v == Key then
			return true
		end
	end
	return false -- Added return false
end

CreateElement("Corner", function(Scale, Offset)
	local Corner = Create("UICorner", {
		CornerRadius = UDim.new(Scale or 0, Offset or 5) -- Default 5
	})
	return Corner
end)

CreateElement("Stroke", function(Color, Thickness)
	local Stroke = Create("UIStroke", {
		Color = Color or Color3.fromRGB(255, 255, 255),
		Thickness = Thickness or 1,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	})
	return Stroke
end)

CreateElement("List", function(Scale, Offset)
	local List = Create("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(Scale or 0, Offset or 0)
	})
	return List
end)

CreateElement("Padding", function(Bottom, Left, Right, Top)
	local Padding = Create("UIPadding", {
		PaddingBottom = UDim.new(0, Bottom or 4),
		PaddingLeft = UDim.new(0, Left or 4),
		PaddingRight = UDim.new(0, Right or 4),
		PaddingTop = UDim.new(0, Top or 4)
	})
	return Padding
end)

CreateElement("TFrame", function()
	local TFrame = Create("Frame", {
		BackgroundTransparency = 1
	})
	return TFrame
end)

CreateElement("Frame", function(Color)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	})
	return Frame
end)

CreateElement("RoundFrame", function(Color, Scale, Offset)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	}, {
		Create("UICorner", {
			CornerRadius = UDim.new(Scale or 0, Offset or 5) -- Default to 5
		})
	})
	return Frame
end)

CreateElement("Button", function()
	local Button = Create("TextButton", {
		Text = "",
		AutoButtonColor = false,
		BackgroundTransparency = 1,
		BorderSizePixel = 0
	})
	return Button
end)

CreateElement("ScrollFrame", function(Color, Width)
	local ScrollFrame = Create("ScrollingFrame", {
		BackgroundTransparency = 1,
		ScrollBarImageColor3 = Color or Color3.fromRGB(100, 100, 100),
		BorderSizePixel = 0,
		ScrollBarThickness = Width or 6, -- Default to 6
		CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollingDirection = Enum.ScrollingDirection.Y, -- Explicitly set Y
        AutomaticCanvasSize = Enum.AutomaticSize.Y, -- Use automatic canvas size
        ElasticBehavior = Enum.ElasticBehavior.WhenScrollable -- Allow bouncing only when needed
	})
	return ScrollFrame
end)

CreateElement("Image", function(ImageID)
	local ImageNew = Create("ImageLabel", {
		Image = ImageID or "",
		BackgroundTransparency = 1,
        ScaleType = Enum.ScaleType.Fit -- Default scale type
	})

	local processedIcon = GetIcon(ImageID)
	if processedIcon ~= nil then
		ImageNew.Image = processedIcon -- Assuming GetIcon returns usable ID/data
	end

	return ImageNew
end)

CreateElement("ImageButton", function(ImageID)
	local Image = Create("ImageButton", {
		Image = ImageID or "",
		BackgroundTransparency = 1,
        ScaleType = Enum.ScaleType.Fit -- Default scale type
	})
    local processedIcon = GetIcon(ImageID)
	if processedIcon ~= nil then
		Image.Image = processedIcon -- Assuming GetIcon returns usable ID/data
	end
	return Image
end)

CreateElement("Label", function(Text, TextSize, Transparency)
	local Label = Create("TextLabel", {
		Text = Text or "",
		TextColor3 = Color3.fromRGB(240, 240, 240),
		TextTransparency = Transparency or 0,
		TextSize = TextSize or 14, -- Default 14
		Font = Enum.Font.Gotham,
		RichText = true,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true -- Default to wrapped
	})
	return Label
end)

local NotificationHolder = SetProps(SetChildren(MakeElement("TFrame"), {
	SetProps(MakeElement("List"), {
		HorizontalAlignment = Enum.HorizontalAlignment.Right, -- Align notifications to right
		SortOrder = Enum.SortOrder.LayoutOrder,
		VerticalAlignment = Enum.VerticalAlignment.Bottom,
		Padding = UDim.new(0, 5)
	})
}), {
	Position = UDim2.new(1, -15, 1, -15), -- Adjusted position slightly
	Size = UDim2.new(0, 300, 0, 400), -- Fixed size, list layout will handle vertical expansion
	AnchorPoint = Vector2.new(1, 1),
    ClipsDescendants = true,
	Parent = Orion,
    BackgroundTransparency = 1,
    ZIndex = 10 -- Ensure notifications are on top
})

function OrionLib:MakeNotification(NotificationConfig)
	spawn(function()
		NotificationConfig.Name = NotificationConfig.Name or "Notification"
		NotificationConfig.Content = NotificationConfig.Content or "Test"
		NotificationConfig.Image = NotificationConfig.Image or "rbxassetid://4384403532"
		NotificationConfig.Time = NotificationConfig.Time or 5 -- Default 5 seconds

		local theme = OrionLib.Themes[OrionLib.SelectedTheme] or OrionLib.Themes.Default -- Fallback theme

        -- Check if NotificationHolder exists and has a ListLayout
        if not NotificationHolder or not NotificationHolder:FindFirstChildOfClass("UIListLayout") then
            warn("Orion Library - NotificationHolder is not properly initialized.")
            return
        end

		local NotificationParent = SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 0),
			AutomaticSize = Enum.AutomaticSize.Y,
			Parent = NotificationHolder,
            BackgroundTransparency = 1 -- Ensure parent is transparent
		})

		local NotificationFrame = SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 8), { -- Use theme color and smaller radius
			Parent = NotificationParent,
			Size = UDim2.new(1, 0, 0, 0),
			Position = UDim2.new(1, 10, 0, 0), -- Start off-screen right
			BackgroundTransparency = 0.1, -- Slightly transparent
			AutomaticSize = Enum.AutomaticSize.Y,
            ClipsDescendants = true
		}), {
			MakeElement("Stroke", theme.Stroke, 1),
			MakeElement("Padding", 10, 10, 10, 10), -- Adjusted padding
            Create("UIListLayout", { -- Use ListLayout for internal content arrangement
                Padding = UDim.new(0, 5),
                SortOrder = Enum.SortOrder.LayoutOrder,
                FillDirection = Enum.FillDirection.Horizontal, -- Horizontal layout for Icon | TextBlock
                VerticalAlignment = Enum.VerticalAlignment.Center
            }),
			SetProps(MakeElement("Image", NotificationConfig.Image), {
				Size = UDim2.new(0, 24, 0, 24), -- Slightly larger icon
				ImageColor3 = theme.Text,
				Name = "Icon",
                LayoutOrder = 1 -- Icon first
			}),
            SetChildren(MakeElement("TFrame"), { -- Frame to hold Title and Content vertically
                Size = UDim2.new(1, -34, 0, 0), -- Fill remaining width (-icon -padding)
                AutomaticSize = Enum.AutomaticSize.Y,
                LayoutOrder = 2, -- Text block second
                BackgroundTransparency = 1,
                Create("UIListLayout", { -- Vertical layout for Title/Content
                    Padding = UDim.new(0, 2),
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    FillDirection = Enum.FillDirection.Vertical
                })
            }, {
			    SetProps(MakeElement("Label", "<b>" .. NotificationConfig.Name .. "</b>", 14), { -- Bold title
				    Size = UDim2.new(1, 0, 0, 16), -- Auto height based on text
                    AutomaticSize = Enum.AutomaticSize.Y,
				    Font = Enum.Font.GothamSemibold, -- Use Semibold
				    Name = "Title",
                    TextColor3 = theme.Text,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    LayoutOrder = 1
			    }),
			    SetProps(MakeElement("Label", NotificationConfig.Content, 13), { -- Smaller content text
				    Size = UDim2.new(1, 0, 0, 0), -- Auto height based on text
                    AutomaticSize = Enum.AutomaticSize.Y,
				    Font = Enum.Font.Gotham,
				    Name = "Content",
				    TextColor3 = theme.TextDark,
				    TextWrapped = true,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    LayoutOrder = 2
			    })
            })
		})

		-- Animate In
		TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = UDim2.new(0, 0, 0, 0)}):Play()

		task.wait(NotificationConfig.Time) -- Use task.wait

		-- Animate Out
		TweenService:Create(NotificationFrame, TweenInfo.new(0.8, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {Position = UDim2.new(1, 10, 0, 0), BackgroundTransparency = 1}):Play()
        -- Fade out components smoothly (find them safely)
        local icon = NotificationFrame:FindFirstChild("Icon")
        local title = NotificationFrame:FindFirstChild("Title", true) -- Recursive search
        local content = NotificationFrame:FindFirstChild("Content", true) -- Recursive search
        local stroke = NotificationFrame:FindFirstChildOfClass("UIStroke")

        if icon then TweenService:Create(icon, TweenInfo.new(0.6, Enum.EasingStyle.Linear), {ImageTransparency = 1}):Play() end
        if title then TweenService:Create(title, TweenInfo.new(0.6, Enum.EasingStyle.Linear), {TextTransparency = 1}):Play() end
        if content then TweenService:Create(content, TweenInfo.new(0.6, Enum.EasingStyle.Linear), {TextTransparency = 1}):Play() end
        if stroke then TweenService:Create(stroke, TweenInfo.new(0.6, Enum.EasingStyle.Linear), {Transparency = 1}):Play() end

		task.wait(0.8) -- Wait for animation to finish
		NotificationParent:Destroy() -- Destroy the parent frame
	end)
end

function OrionLib:Init()
	if OrionLib.SaveCfg and OrionLib.Folder then
		local configFilePath = OrionLib.Folder .. "/" .. game.GameId .. ".txt"
		local successRead, configContent = pcall(readfile, configFilePath)
		if successRead and configContent then
			local successLoad = pcall(LoadCfg, configContent)
			if successLoad then
				OrionLib:MakeNotification({
					Name = "Configuration Loaded",
					Content = "Settings for game " .. game.GameId .. " loaded.",
					Time = 5
				})
			else
				warn("Orion Library Init - Failed to load configuration:", configContent)
				OrionLib:MakeNotification({
					Name = "Configuration Error",
					Content = "Failed to load settings for game " .. game.GameId .. ".",
					Time = 5
				})
            end
		elseif not successRead then
             -- Only warn if the file exists but couldn't be read
             if isfile(configFilePath) then
                 warn("Orion Library Init - Could not read config file:", configContent) -- configContent is error message here
             end
		end
	end
	SetTheme() -- Apply theme initially
end

function OrionLib:MakeWindow(WindowConfig)
	local FirstTab = true
	local Minimized = false
	local Loaded = false
	local UIHidden = false
	local CurrentActiveContainer = nil -- Store the active container for search

	WindowConfig = WindowConfig or {}
	WindowConfig.Name = WindowConfig.Name or "Orion Library"
	WindowConfig.ConfigFolder = WindowConfig.ConfigFolder or WindowConfig.Name
	WindowConfig.SaveConfig = WindowConfig.SaveConfig or false
	WindowConfig.HidePremium = WindowConfig.HidePremium or false -- This flag controls visibility of the premium label area
	if WindowConfig.IntroEnabled == nil then
		WindowConfig.IntroEnabled = true
	end
	WindowConfig.IntroText = WindowConfig.IntroText or "Orion Library"
	WindowConfig.CloseCallback = WindowConfig.CloseCallback or function() end
	WindowConfig.ShowIcon = WindowConfig.ShowIcon or false
	WindowConfig.Icon = WindowConfig.Icon or "rbxassetid://8834748103"
	WindowConfig.IntroIcon = WindowConfig.IntroIcon or "rbxassetid://8834748103"
	OrionLib.Folder = WindowConfig.ConfigFolder
	OrionLib.SaveCfg = WindowConfig.SaveConfig

	if WindowConfig.SaveConfig then
        pcall(function() -- Wrap folder creation in pcall
		    if not isfolder(WindowConfig.ConfigFolder) then
			    makefolder(WindowConfig.ConfigFolder)
		    end
        end)
	end

    local theme = OrionLib.Themes[OrionLib.SelectedTheme] or OrionLib.Themes.Default

	local TabHolder = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", theme.Divider, 4), { -- Use Divider color for scrollbar
		Size = UDim2.new(1, 0, 1, -50), -- Takes full height minus bottom bar
        Position = UDim2.new(0,0,0,0),
        AutomaticCanvasSize = Enum.AutomaticSize.None, -- Disable automatic canvas size here, will be set by list layout connection
        CanvasSize = UDim2.new(0,0,0,0),
        BackgroundTransparency = 1 -- Transparent background
	}), {
		MakeElement("List", 0, 5), -- Padding between tabs
		MakeElement("Padding", 8, 5, 0, 5) -- Top/Bottom/Left/Right padding for tabs
	}), "Second") -- Left panel uses Second theme color

	AddConnection(TabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        -- Add padding to canvas size calculation (Top 8 + Bottom 0)
		TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolder.UIListLayout.AbsoluteContentSize.Y + 8)
	end)

	local CloseBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		Position = UDim2.new(0.5, 0, 0, 0),
		BackgroundTransparency = 1
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072725342"), { -- Use X icon
			Position = UDim2.new(0.5, 0, 0.5, 0),
            AnchorPoint = Vector2.new(0.5, 0.5),
			Size = UDim2.new(0, 16, 0, 16) -- Adjusted size
		}), "Text")
	})

	local MinimizeBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		BackgroundTransparency = 1
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072719338"), { -- Use Minimize icon
			Position = UDim2.new(0.5, 0, 0.5, 0),
            AnchorPoint = Vector2.new(0.5, 0.5),
			Size = UDim2.new(0, 16, 0, 16), -- Adjusted size
			Name = "Ico"
		}), "Text")
	})

	local DragPoint = SetProps(MakeElement("TFrame"), {
		Size = UDim2.new(1, 0, 0, 50), -- Covers top bar area
        ZIndex = 3 -- Ensure it's above other top bar elements for dragging (except maybe buttons)
	})

	local WindowStuff = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 10), { -- Use theme, keep rounding
		Size = UDim2.new(0, 150, 1, -50), -- Left tab bar size
		Position = UDim2.new(0, 0, 0, 50), -- Position below top bar
        ClipsDescendants = false, -- Don't clip tab bar scroll
        BorderSizePixel = 0 -- No border here
	}), {
		AddThemeObject(SetProps(MakeElement("Frame"), { -- Divider line
			Size = UDim2.new(0, 1, 1, 0),
			Position = UDim2.new(1, -1, 0, 0)
		}), "Stroke"),
		TabHolder, -- Contains tabs
		SetChildren(SetProps(MakeElement("TFrame"), { -- Bottom user info area
			Size = UDim2.new(1, 0, 0, 50),
			Position = UDim2.new(0, 0, 1, -50),
            BackgroundTransparency = 1
		}), {
			AddThemeObject(SetProps(MakeElement("Frame"), { -- Top line divider
				Size = UDim2.new(1, 0, 0, 1)
			}), "Stroke"),
			SetChildren(SetProps(MakeElement("RoundFrame"), { -- Profile picture frame
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0),
                BackgroundColor3 = theme.Divider, -- Use a theme color
                ClipsDescendants = true,
                BorderSizePixel = 0
			}), {
				SetProps(MakeElement("Image", "https://www.roblox.com/headshot-thumbnail/image?userId=".. LocalPlayer.UserId .."&width=420&height=420&format=png"), {
					Size = UDim2.new(1, 0, 1, 0)
				}),
				MakeElement("Corner", 1) -- Make it circular
			}),
			AddThemeObject(SetProps(MakeElement("Label", LocalPlayer.DisplayName, WindowConfig.HidePremium and 14 or 13), {
				Size = UDim2.new(1, -55, 0, 13), -- Adjusted size/position
				Position = WindowConfig.HidePremium and UDim2.new(0, 50, 0.5, 0) or UDim2.new(0, 50, 0, 12), -- Centered vertically if premium hidden, top if shown
                AnchorPoint = WindowConfig.HidePremium and Vector2.new(0, 0.5) or Vector2.new(0, 0), -- Adjust anchor point
				Font = Enum.Font.GothamBold,
				ClipsDescendants = true,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Center -- Center vertically regardless for consistency? Let's try center.
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", "[Private]", 12), { -- Changed Text
				Size = UDim2.new(1, -55, 0, 12), -- Adjusted size/position
				Position = UDim2.new(0, 50, 1, -12), -- Position below username (adjust Y slightly)
                AnchorPoint = Vector2.new(0, 1), -- Anchor to bottom
				Visible = not WindowConfig.HidePremium, -- Controlled by the flag
                Font = Enum.Font.Gotham, -- Use regular font
                TextXAlignment = Enum.TextXAlignment.Left
			}), "TextDark") -- The visibility is controlled by HidePremium flag here
		}),
	}), "Second") -- End WindowStuff (Tab bar area)

	local WindowName = AddThemeObject(SetProps(MakeElement("Label", WindowConfig.Name, 16), { -- Increased size slightly
		Size = UDim2.new(1, -100, 1, 0), -- Adjust size relative to buttons/icon
		Position = UDim2.new(0, WindowConfig.ShowIcon and 45 or 15, 0, 0), -- Adjust based on icon
		Font = Enum.Font.GothamMedium, -- Use Medium weight
		TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Center,
		TextSize = 16 -- Explicitly set size
	}), "Text")

	local WindowTopBarLine = AddThemeObject(SetProps(MakeElement("Frame"), {
		Size = UDim2.new(1, 0, 0, 1),
		Position = UDim2.new(0, 0, 1, -1) -- Position at the bottom of the 50px top bar
	}), "Stroke")

    -- Search Box Removed

	local MainWindow = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Main, 0, 10), { -- Use Main theme color
		Parent = Orion,
		Position = UDim2.new(0.5, -307.5, 0.5, -172), -- Revert to original position (615/2, 344/2)
		Size = UDim2.new(0, 615, 0, 344), -- Revert to original size
		ClipsDescendants = true,
        ZIndex = 1 -- Base window ZIndex
	}), {
		SetChildren(SetProps(MakeElement("TFrame"), { -- Top Bar container
			Size = UDim2.new(1, 0, 0, 50),
			Name = "TopBar",
            BackgroundTransparency = 1,
            ZIndex = 4 -- Top bar above everything else
		}), {
			WindowName,
			WindowTopBarLine,
			AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 7), { -- Buttons container
				Size = UDim2.new(0, 70, 0, 30),
				Position = UDim2.new(1, -10, 0.5, 0), -- Closer to the edge (-10 offset)
                AnchorPoint = Vector2.new(1, 0.5) -- Anchor to the right
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				AddThemeObject(SetProps(MakeElement("Frame"), { -- Divider in buttons
					Size = UDim2.new(0, 1, 1, -10), -- Add padding top/bottom
					Position = UDim2.new(0.5, 0, 0.5, 0),
                    AnchorPoint = Vector2.new(0.5, 0.5)
				}), "Stroke"),
				CloseBtn,
				MinimizeBtn
			}), "Second"),
		}),
		DragPoint, -- Place DragPoint here, above WindowStuff but below TopBar Buttons
		WindowStuff, -- Left tab bar area (ZIndex 2 default)
        -- Content containers will be added here later with ZIndex 1 or 2
	}), "Main")

	if WindowConfig.ShowIcon then
		-- WindowName position handled above
		local WindowIcon = SetProps(MakeElement("Image", WindowConfig.Icon), {
			Size = UDim2.new(0, 20, 0, 20),
			Position = UDim2.new(0, 15, 0.5, 0), -- Position left, centered vertically
            AnchorPoint = Vector2.new(0, 0.5)
		})
		WindowIcon.Parent = MainWindow.TopBar
	end

	AddDraggingFunctionality(DragPoint, MainWindow) -- Use the reverted dragging logic

	AddConnection(CloseBtn.MouseButton1Click, function() -- Use Click instead of Up
		MainWindow.Visible = false
		UIHidden = true
		OrionLib:MakeNotification({
			Name = "Interface Hidden",
			Content = "Tap RightShift to reopen the interface",
			Time = 5
		})
		pcall(WindowConfig.CloseCallback) -- Safely call callback
	end)

	AddConnection(UserInputService.InputBegan, function(Input, GameProcessed)
        if GameProcessed then return end -- Ignore if already processed by game
		if Input.KeyCode == Enum.KeyCode.RightShift and UIHidden then
			MainWindow.Visible = true
            UIHidden = false -- Reset flag
		end
	end)

	AddConnection(MinimizeBtn.MouseButton1Click, function() -- Use Click instead of Up
        local targetSize
		if Minimized then
            -- Expand
            targetSize = UDim2.new(0, 615, 0, 344) -- Original size
			MinimizeBtn.Ico.Image = "rbxassetid://7072719338" -- Minimize icon
			TweenService:Create(MainWindow, TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = targetSize}):Play()
            task.wait(0.1) -- Allow tween to start
            WindowStuff.Visible = true
            WindowTopBarLine.Visible = true
			MainWindow.ClipsDescendants = true -- Enable clipping after resize starts
		else
            -- Minimize
            WindowTopBarLine.Visible = false
            WindowStuff.Visible = false
			MinimizeBtn.Ico.Image = "rbxassetid://7072720870" -- Maximize icon (square)
            MainWindow.ClipsDescendants = true -- Ensure clipped before shrinking

            local textWidth = WindowName.TextBounds.X
			local minWidth = textWidth + (WindowConfig.ShowIcon and 45 or 15) + 90 -- Text + LeftMargin + RightButtonsArea
			targetSize = UDim2.new(0, math.max(minWidth, 200), 0, 50) -- Ensure minimum width, height is TopBar height
			TweenService:Create(MainWindow, TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = targetSize}):Play()
		end
		Minimized = not Minimized
	end)

    -- Search Box Logic Removed

	local function LoadSequence()
		MainWindow.Visible = false
		local LoadSequenceLogo = SetProps(MakeElement("Image", WindowConfig.IntroIcon), {
			Parent = Orion,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.4, 0),
			Size = UDim2.new(0, 32, 0, 32), -- Slightly larger logo
			ImageColor3 = Color3.fromRGB(255, 255, 255),
			ImageTransparency = 1
		})

		local LoadSequenceText = SetProps(MakeElement("Label", WindowConfig.IntroText, 16), { -- Slightly larger text
			Parent = Orion,
            AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.5, 10), -- Position below logo initially
			Size = UDim2.new(0, 400, 0, 30), -- Wider area for text
			TextXAlignment = Enum.TextXAlignment.Center,
			Font = Enum.Font.GothamBold,
			TextTransparency = 1
		})

		-- Animate logo in
		TweenService:Create(LoadSequenceLogo, TweenInfo.new(.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0, Position = UDim2.new(0.5, 0, 0.5, -20)}):Play() -- Move up slightly
		task.wait(0.6)
		-- Animate text in (fade and move up)
		TweenService:Create(LoadSequenceText, TweenInfo.new(.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0, Position = UDim2.new(0.5, 0, 0.5, 20)}):Play()
		task.wait(1.5)
		-- Animate out
		TweenService:Create(LoadSequenceLogo, TweenInfo.new(.4, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {ImageTransparency = 1, Position = UDim2.new(0.5, 0, 0.6, 0)}):Play() -- Move down
		TweenService:Create(LoadSequenceText, TweenInfo.new(.4, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {TextTransparency = 1, Position = UDim2.new(0.5, 0, 0.6, 20)}):Play() -- Move down
		task.wait(0.5)

		MainWindow.Visible = true
		LoadSequenceLogo:Destroy()
		LoadSequenceText:Destroy()
	end

	if WindowConfig.IntroEnabled then
		LoadSequence()
    else
        MainWindow.Visible = true -- Show immediately if intro disabled
	end

    OrionLib:Init() -- Initialize after window setup, before tabs (loads config)

	local TabFunction = {}
	function TabFunction:MakeTab(TabConfig)
		TabConfig = TabConfig or {}
		TabConfig.Name = TabConfig.Name or "Tab"
		TabConfig.Icon = TabConfig.Icon or ""
		TabConfig.PremiumOnly = TabConfig.PremiumOnly or false

        local theme = OrionLib.Themes[OrionLib.SelectedTheme] or OrionLib.Themes.Default

		local TabFrame = SetChildren(SetProps(MakeElement("Button"), {
			Size = UDim2.new(1, -10, 0, 35), -- Slightly taller tabs, padding included L/R
            Position = UDim2.new(0.5, 0, 0, 0),
            AnchorPoint = Vector2.new(0.5, 0),
			Parent = TabHolder,
            BackgroundTransparency = 1, -- Ensure button itself is transparent
            Name = TabConfig.Name -- Use tab name for easier identification if needed
		}), {
            AddThemeObject(SetProps(MakeElement("Image", TabConfig.Icon), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 18, 0, 18),
				Position = UDim2.new(0, 15, 0.5, 0), -- Indent icon
				ImageTransparency = 0.5, -- Start semi-transparent
				Name = "Ico"
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", TabConfig.Name, 14), {
				Size = UDim2.new(1, -45, 1, 0), -- Adjust size based on icon/padding
				Position = UDim2.new(0, 40, 0, 0), -- Position next to icon
				Font = Enum.Font.GothamSemibold,
				TextTransparency = 0.5, -- Start semi-transparent
				Name = "Title",
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Center
			}), "Text"),
		})

		-- Handle icon loading failure / SVG data from GetIcon if needed
        local tabIconFrame = TabFrame:FindFirstChild("Ico")
		local iconData = GetIcon(TabConfig.Icon)
		if iconData and tabIconFrame then
			tabIconFrame.Image = iconData -- Assign potentially processed icon
        elseif tabIconFrame then
            tabIconFrame.Visible = false -- Hide icon frame if no icon specified
            local titleLabel = TabFrame:FindFirstChild("Title")
            if titleLabel then
                titleLabel.Position = UDim2.new(0, 15, 0, 0) -- Adjust title position if no icon
                titleLabel.Size = UDim2.new(1, -30, 1, 0)
            end
		end

        -- Define Content Area (Container)
        -- Vertical space: 50 (Top) + 50 (Bottom) = 100 total vertical chrome
        local contentHeight = 344 - 100 -- Window height - vertical chrome
		local Container = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", theme.Divider, 5), {
			Size = UDim2.new(1, -150, 0, contentHeight), -- Size: FullWidth-LeftPanel, CalculatedHeight
			Position = UDim2.new(0, 150, 0, 50), -- Position: RightOfLeftPanel, BelowTopBar
			Parent = MainWindow,
			Visible = false,
			Name = TabConfig.Name .. "_Container", -- Unique name for container
            BackgroundColor3 = theme.Main, -- Use Main theme color for background
            BorderSizePixel = 0, -- No border for container itself
            AutomaticCanvasSize = Enum.AutomaticSize.Y, -- Let ListLayout determine height
            CanvasSize = UDim2.new(0,0,0,0), -- Reset initial canvas size
            ZIndex = 1 -- Content area behind top bar, etc.
		}), {
			MakeElement("List", 0, 6), -- Padding between elements
			MakeElement("Padding", 10, 10, 10, 10) -- Padding around content (T, L, B, R)
		}), "Main") -- Apply Main theme background color


		AddConnection(Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
            -- Canvas size handled by AutomaticCanvasSize = Y
		end)

		if FirstTab then
			FirstTab = false
            local tabIco = TabFrame:FindFirstChild("Ico")
            local tabTitle = TabFrame:FindFirstChild("Title")
            if tabIco then tabIco.ImageTransparency = 0 end
            if tabTitle then
			    tabTitle.TextTransparency = 0
                tabTitle.Font = Enum.Font.GothamBold -- Make active tab bold
            end
			Container.Visible = true
            OrionLib.ActiveContainer = Container -- Set initial active container
             -- Search Removed: No need to clear/update search
		end

		AddConnection(TabFrame.MouseButton1Click, function()
            if Container == OrionLib.ActiveContainer then return end -- Don't re-select same tab

			for _, child in ipairs(MainWindow:GetChildren()) do
                if child:IsA("ScrollingFrame") and child.Name:match("_Container$") then
                    child.Visible = false -- Hide all containers
                end
            end
            for _, tabBtn in ipairs(TabHolder:GetChildren()) do
                if tabBtn:IsA("TextButton") then
                    local ico = tabBtn:FindFirstChild("Ico")
                    local title = tabBtn:FindFirstChild("Title")
                    if ico then TweenService:Create(ico, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {ImageTransparency = 0.5}):Play() end
                    if title then
                        title.Font = Enum.Font.GothamSemibold
                        TweenService:Create(title, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextTransparency = 0.5}):Play()
                    end
                end
            end

			-- Activate selected tab
            local tabIco = TabFrame:FindFirstChild("Ico")
            local tabTitle = TabFrame:FindFirstChild("Title")
            if tabIco then TweenService:Create(tabIco, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {ImageTransparency = 0}):Play() end
            if tabTitle then
			    TweenService:Create(tabTitle, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextTransparency = 0}):Play()
			    tabTitle.Font = Enum.Font.GothamBold
            end
			Container.Visible = true
            OrionLib.ActiveContainer = Container -- Update active container

            -- Search Removed: No need to clear/update search
		end)

		-- ======================================================================== --
        -- ELEMENT FUNCTIONS (AddLabel to AddColorpicker)
        -- ======================================================================== --
        local function GetElements(ItemParent)
            local ElementFunction = {}
            local theme = OrionLib.Themes[OrionLib.SelectedTheme] or OrionLib.Themes.Default -- Get current theme

			function ElementFunction:AddLabel(Text)
				local LabelFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 5), {
					Size = UDim2.new(1, 0, 0, 30), -- Fixed height
					BackgroundTransparency = 0.7, -- Slightly transparent background
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text or "Label", 14), { -- Default text, slightly smaller size
						Size = UDim2.new(1, -20, 1, 0), -- Padding L/R
						Position = UDim2.new(0, 10, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content",
                        TextYAlignment = Enum.TextYAlignment.Center,
                        TextXAlignment = Enum.TextXAlignment.Left
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")

				local LabelFunction = {}
				function LabelFunction:Set(ToChange)
                    local contentLabel = LabelFrame and LabelFrame:FindFirstChild("Content")
					if contentLabel then contentLabel.Text = ToChange or "" end
				end
				return LabelFunction
			end
			function ElementFunction:AddParagraph(Text, Content)
				Text = Text or "Paragraph Title"
				Content = Content or "Paragraph content goes here."

				local ParagraphFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 5), {
					Size = UDim2.new(1, 0, 0, 0), -- Automatic height
                    AutomaticSize = Enum.AutomaticSize.Y,
					BackgroundTransparency = 0.7,
					Parent = ItemParent,
                    ClipsDescendants = true
				}), {
                    MakeElement("Padding", 8, 10, 8, 10), -- T,L,B,R padding inside frame
					AddThemeObject(SetProps(MakeElement("Label", "<b>" .. Text .. "</b>", 14), { -- Bold Title
						Size = UDim2.new(1, 0, 0, 16), -- Automatic height based on text
                        AutomaticSize = Enum.AutomaticSize.Y,
						Position = UDim2.new(0, 0, 0, 0),
						Font = Enum.Font.GothamSemibold,
						Name = "Title",
                        TextXAlignment = Enum.TextXAlignment.Left,
                        LayoutOrder = 1 -- Ensure title comes first
					}), "Text"),
					AddThemeObject(SetProps(MakeElement("Label", Content, 13), { -- Content text
						Size = UDim2.new(1, 0, 0, 0), -- Automatic height
                        AutomaticSize = Enum.AutomaticSize.Y,
						Position = UDim2.new(0, 0, 0, 0), -- Position managed by layout
						Font = Enum.Font.Gotham,
						Name = "Content",
						TextWrapped = true,
                        LayoutOrder = 2 -- Content after title
					}), "TextDark"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
                    Create("UIListLayout", { -- Layout for title and content
                        Padding = UDim.new(0, 4),
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        FillDirection = Enum.FillDirection.Vertical
                    })
				}), "Second")

				local ParagraphFunction = {}
				function ParagraphFunction:Set(ToChange)
                    local contentLabel = ParagraphFrame and ParagraphFrame:FindFirstChild("Content")
					if contentLabel then contentLabel.Text = ToChange or "" end
				end
				return ParagraphFunction
			end
			function ElementFunction:AddButton(ButtonConfig)
				ButtonConfig = ButtonConfig or {}
				ButtonConfig.Name = ButtonConfig.Name or "Button"
				ButtonConfig.Callback = ButtonConfig.Callback or function() print("Button '" .. ButtonConfig.Name .. "' clicked.") end
				ButtonConfig.Icon = ButtonConfig.Icon or "" -- No default icon

				local Button = {}

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0),
                    ZIndex = 2 -- Ensure button is clickable over background elements
				})

				local ButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 5), {
					Size = UDim2.new(1, 0, 0, 33), -- Fixed height
					Parent = ItemParent,
                    ClipsDescendants = true
				}), {
					AddThemeObject(SetProps(MakeElement("Label", ButtonConfig.Name, 14), { -- Slightly smaller text
						Size = UDim2.new(1, -(10 + (ButtonConfig.Icon ~= "" and 30 or 10)), 1, 0), -- Size accounting for icon/padding
						Position = UDim2.new(0, 10, 0, 0), -- Left padding
						Font = Enum.Font.GothamBold,
						Name = "Content",
                        TextXAlignment = Enum.TextXAlignment.Left,
                        TextYAlignment = Enum.TextYAlignment.Center
					}), "Text"),
					AddThemeObject(SetProps(MakeElement("Image", ButtonConfig.Icon), {
						Size = UDim2.new(0, 18, 0, 18), -- Icon size
						Position = UDim2.new(1, -28, 0.5, 0), -- Position right, centered Y
                        AnchorPoint = Vector2.new(1, 0.5),
                        Visible = ButtonConfig.Icon ~= "", -- Only visible if icon is provided
                        Name = "Icon"
					}), "TextDark"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					Click
				}), "Second")

                -- Handle icon loading/visibility if needed
                local btnIcon = ButtonFrame:FindFirstChild("Icon")
                if btnIcon and ButtonConfig.Icon ~= "" then
                     local iconData = GetIcon(ButtonConfig.Icon)
                     if iconData then btnIcon.Image = iconData else btnIcon.Visible = false end
                elseif btnIcon then
                    btnIcon.Visible = false
                     -- Adjust label size if no icon
                     local label = ButtonFrame:FindFirstChild("Content")
                     if label then label.Size = UDim2.new(1, -20, 1, 0) end
                end

                local originalColor = ButtonFrame.BackgroundColor3
                local hoverColor = originalColor:Lerp(Color3.new(1,1,1), 0.1) -- Slightly lighter
                local pressColor = originalColor:Lerp(Color3.new(1,1,1), 0.2) -- Even lighter

				AddConnection(Click.MouseEnter, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {BackgroundColor3 = hoverColor}):Play()
				end)

				AddConnection(Click.MouseLeave, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {BackgroundColor3 = originalColor}):Play()
				end)

				AddConnection(Click.MouseButton1Click, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = hoverColor}):Play() -- Back to hover color on up
					task.spawn(ButtonConfig.Callback) -- Use task.spawn for safety
				end)

				AddConnection(Click.MouseButton1Down, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = pressColor}):Play()
				end)

				function Button:Set(ButtonText)
                    local label = ButtonFrame:FindFirstChild("Content")
                    if label then label.Text = ButtonText or "" end
				end

				return Button
			end
			function ElementFunction:AddToggle(ToggleConfig)
				ToggleConfig = ToggleConfig or {}
				ToggleConfig.Name = ToggleConfig.Name or "Toggle"
				ToggleConfig.Default = ToggleConfig.Default or false
				ToggleConfig.Callback = ToggleConfig.Callback or function(val) print("Toggle '" .. ToggleConfig.Name .. "' set to " .. tostring(val)) end
				ToggleConfig.Color = ToggleConfig.Color or Color3.fromRGB(9, 149, 98) -- Default green
				ToggleConfig.Flag = ToggleConfig.Flag or nil
				ToggleConfig.Save = ToggleConfig.Save or false

				local Toggle = {Value = ToggleConfig.Default, Save = ToggleConfig.Save, Type = "Toggle"} -- Added Type

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0),
                     ZIndex = 2
				})

				local ToggleBox = SetChildren(SetProps(MakeElement("RoundFrame", theme.Divider, 0, 4), { -- Start with Divider color
					Size = UDim2.new(0, 36, 0, 20), -- Wider toggle box
					Position = UDim2.new(1, -46, 0.5, 0), -- Adjust position based on size
					AnchorPoint = Vector2.new(0, 0.5),
                    ClipsDescendants = true
				}), {
					SetProps(AddThemeObject(MakeElement("Stroke"), "Stroke"), { -- Use theme stroke initially
						Name = "Stroke",
						Transparency = 0 -- Visible stroke
					}),
					SetProps(MakeElement("RoundFrame", theme.Text, 1, 0), { -- Circular handle
                        Name = "Handle",
                        Size = UDim2.new(0, 16, 0, 16), -- Size of handle
                        AnchorPoint = Vector2.new(0.5, 0.5),
                        Position = UDim2.new(0, 10, 0.5, 0), -- Initial position (off)
                        BorderSizePixel = 0
                    })
				})

				local ToggleFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 5), {
					Size = UDim2.new(1, 0, 0, 38), -- Fixed height
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", ToggleConfig.Name, 14), {
						Size = UDim2.new(1, -60, 1, 0), -- Adjust size for toggle box
						Position = UDim2.new(0, 10, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content",
                        TextXAlignment = Enum.TextXAlignment.Left,
                        TextYAlignment = Enum.TextYAlignment.Center
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					ToggleBox,
					Click
				}), "Second")

                local Handle = ToggleBox:FindFirstChild("Handle")
                local BoxStroke = ToggleBox:FindFirstChild("Stroke")

                -- Function to update visual state without firing callback
                function Toggle:UpdateVisual()
                    local targetBgColor = Toggle.Value and ToggleConfig.Color or theme.Divider
                    local targetHandlePos = Toggle.Value and UDim2.new(0, 26, 0.5, 0) or UDim2.new(0, 10, 0.5, 0)
                    local targetStrokeColor = Toggle.Value and ToggleConfig.Color or theme.Stroke
                    TweenService:Create(ToggleBox, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = targetBgColor}):Play()
                    if Handle then TweenService:Create(Handle, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Position = targetHandlePos}):Play() end
                    if BoxStroke then TweenService:Create(BoxStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Color = targetStrokeColor}):Play() end
                end

				function Toggle:Set(Value, fromLoad)
                    local changed = self.Value ~= Value -- Check if value actually changed
					self.Value = Value
                    Toggle:UpdateVisual() -- Update visuals
					if not fromLoad and changed then -- Only fire callback if value changed and not from load
						pcall(ToggleConfig.Callback, Toggle.Value)
                        if ToggleConfig.Flag and OrionLib.SaveCfg then SaveCfg(game.GameId) end -- Save on change if flagged
					end
				end

				Toggle:Set(Toggle.Value, true) -- Initial set without firing callback

                local originalColor = ToggleFrame.BackgroundColor3
                local hoverColor = originalColor:Lerp(Color3.new(1,1,1), 0.1)
                local pressColor = originalColor:Lerp(Color3.new(1,1,1), 0.2)

				AddConnection(Click.MouseEnter, function()
					TweenService:Create(ToggleFrame, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {BackgroundColor3 = hoverColor}):Play()
				end)

				AddConnection(Click.MouseLeave, function()
					TweenService:Create(ToggleFrame, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {BackgroundColor3 = originalColor}):Play()
				end)

				AddConnection(Click.MouseButton1Click, function()
                    Toggle:Set(not Toggle.Value) -- Set and fire callback
					TweenService:Create(ToggleFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = hoverColor}):Play()
				end)

				AddConnection(Click.MouseButton1Down, function()
					TweenService:Create(ToggleFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = pressColor}):Play()
				end)

				if ToggleConfig.Flag then
					OrionLib.Flags[ToggleConfig.Flag] = Toggle
				end
				return Toggle
			end
			function ElementFunction:AddSlider(SliderConfig)
				SliderConfig = SliderConfig or {}
				SliderConfig.Name = SliderConfig.Name or "Slider"
				SliderConfig.Min = SliderConfig.Min or 0
				SliderConfig.Max = SliderConfig.Max or 100
				SliderConfig.Increment = SliderConfig.Increment or 1
				SliderConfig.Default = SliderConfig.Default or SliderConfig.Min -- Default to Min
				SliderConfig.Callback = SliderConfig.Callback or function(val) print("Slider '" .. SliderConfig.Name .. "' set to " .. tostring(val)) end
				SliderConfig.ValueName = SliderConfig.ValueName or ""
				SliderConfig.Color = SliderConfig.Color or Color3.fromRGB(9, 149, 98) -- Default Green
				SliderConfig.Flag = SliderConfig.Flag or nil
				SliderConfig.Save = SliderConfig.Save or false

				local Slider = {Value = SliderConfig.Default, Save = SliderConfig.Save, Type = "Slider"} -- Added Type
				local Dragging = false

				local SliderDrag = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 4), { -- Filled part
					Size = UDim2.new(0, 0, 1, 0), -- Width controlled by value
					BackgroundTransparency = 0, -- Solid color fill
					BorderSizePixel = 0,
                    BackgroundColor3 = SliderConfig.Color -- Explicitly set color here
				}), {})

                local ValueLabel = AddThemeObject(SetProps(MakeElement("Label", "", 13), { -- Value display text
                    Size = UDim2.new(0.5, -10, 1, 0), -- Adjusted Size
                    Position = UDim2.new(1, 0, 0.5, 0), -- Adjusted Position
                    AnchorPoint = Vector2.new(1, 0.5), -- Anchor Right Center
                    Font = Enum.Font.GothamBold,
                    Name = "ValueDisplay",
                    TextTransparency = 0,
                    TextXAlignment = Enum.TextXAlignment.Right,
                    TextYAlignment = Enum.TextYAlignment.Center,
                    ZIndex = 3 -- Above drag bar
                }), "Text")


				local SliderBar = SetChildren(SetProps(MakeElement("RoundFrame", theme.Divider, 0, 4), { -- Background bar
					Size = UDim2.new(1, 0, 0, 18), -- Bar size
					Position = UDim2.new(0.5, 0, 1, 0), -- Positioned at bottom
                    AnchorPoint = Vector2.new(0.5, 1),
					BackgroundTransparency = 0, -- Solid background
                    ClipsDescendants = true
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"), -- Stroke around the bar
					SliderDrag -- Fill overlay
				})

				local SliderFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 5), {
					Size = UDim2.new(1, 0, 0, 65), -- Height for label + bar + padding
					Parent = ItemParent
				}), {
                    MakeElement("Padding", 10, 10, 10, 10), -- Overall padding
					AddThemeObject(SetProps(MakeElement("Label", SliderConfig.Name, 14), {
						Size = UDim2.new(0.5, -10, 1, 0), -- Half width for name, full height within padding
						Position = UDim2.new(0, 0, 0.5, 0), -- Position left, centered Y within padding
                        AnchorPoint = Vector2.new(0, 0.5),
						Font = Enum.Font.GothamBold,
						Name = "Content",
                        TextXAlignment = Enum.TextXAlignment.Left,
                        TextYAlignment = Enum.TextYAlignment.Center -- Center vertically
					}), "Text"),
                    ValueLabel, -- Add value label
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					SliderBar
				}), "Second")

                local inputBeganConn, inputEndedConn, inputChangedConn

				inputBeganConn = AddConnection(SliderBar.InputBegan, function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
						Dragging = true
						local mouseLocation = UserInputService:GetMouseLocation()
                        local barPos = SliderBar.AbsolutePosition
                        local barSize = SliderBar.AbsoluteSize
                        if barSize.X == 0 then return end -- Avoid div by zero
                        local SizeScale = math.clamp((mouseLocation.X - barPos.X) / barSize.X, 0, 1)
						local newValue = SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale)
						Slider:Set(newValue) -- Update on initial click

						if inputChangedConn then pcall(function() inputChangedConn:Disconnect() end) inputChangedConn = nil end -- Disconnect previous if any
                        inputChangedConn = AddConnection(UserInputService.InputChanged, function(moveInput)
                            if Dragging and (moveInput.UserInputType == Enum.UserInputType.MouseMovement or moveInput.UserInputType == Enum.UserInputType.Touch) then
                                local currentMouseLocation = UserInputService:GetMouseLocation()
                                local currentBarPos = SliderBar.AbsolutePosition -- Get current position in case of scrolling/layout shifts
                                local currentBarSize = SliderBar.AbsoluteSize
                                if currentBarSize.X == 0 then return end
                                local currentSizeScale = math.clamp((currentMouseLocation.X - currentBarPos.X) / currentBarSize.X, 0, 1)
								local currentNewValue = SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * currentSizeScale)
								Slider:Set(currentNewValue)
							end
						end)
					end
				end)

				inputEndedConn = AddConnection(UserInputService.InputEnded, function(Input) -- Use UserInputService for release anywhere
					if Dragging and (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) then
						Dragging = false
                        if inputChangedConn then pcall(function() inputChangedConn:Disconnect() end) inputChangedConn = nil end -- Clean up listener
                        if SliderConfig.Flag and OrionLib.SaveCfg then SaveCfg(game.GameId) end -- Save on drag end
					end
				end)

				function Slider:Set(Value, fromLoad)
					local clampedValue = math.clamp(Round(Value, SliderConfig.Increment), SliderConfig.Min, SliderConfig.Max)
                    if self.Value == clampedValue and not fromLoad then return end -- No change unless loading

					self.Value = clampedValue
                    local percentage = 0
                    if SliderConfig.Max > SliderConfig.Min then
                        percentage = (self.Value - SliderConfig.Min) / (SliderConfig.Max - SliderConfig.Min)
                    elseif self.Value >= SliderConfig.Max then
                         percentage = 1
                    end

					TweenService:Create(SliderDrag,TweenInfo.new(.1, Enum.EasingStyle.Quad),{Size = UDim2.fromScale(percentage, 1)}):Play()
                    ValueLabel.Text = tostring(self.Value) .. (SliderConfig.ValueName and (" " .. SliderConfig.ValueName) or "")

                    if not fromLoad then
					    pcall(SliderConfig.Callback, self.Value)
                    end
				end

				Slider:Set(Slider.Value, true) -- Initial set without callback, mark as from load
				if SliderConfig.Flag then
					OrionLib.Flags[SliderConfig.Flag] = Slider
				end
				return Slider
			end
            function ElementFunction:AddDropdown(DropdownConfig) -- Copied from previous
				DropdownConfig = DropdownConfig or {}
				DropdownConfig.Name = DropdownConfig.Name or "Dropdown"
				DropdownConfig.Options = DropdownConfig.Options or {}
				DropdownConfig.Default = DropdownConfig.Default or ""
				DropdownConfig.Callback = DropdownConfig.Callback or function(val) print("Dropdown '" .. DropdownConfig.Name .. "' set to " .. tostring(val)) end
				DropdownConfig.Flag = DropdownConfig.Flag or nil
				DropdownConfig.Save = DropdownConfig.Save or false

				local Dropdown = {Value = DropdownConfig.Default, Options = DropdownConfig.Options, Buttons = {}, Toggled = false, Type = "Dropdown", Save = DropdownConfig.Save}
				local MaxElements = 5 -- Max visible elements before scroll

				local DropdownList = MakeElement("List", 0, 2) -- Padding between options

                local DropdownContainer = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", theme.Second, 4), { -- Use Second theme color, slightly thinner scrollbar
					DropdownList
				}), {
					Parent = ItemParent, -- Will be parented to DropdownFrame later
                    BackgroundColor3 = theme.Second, -- Match background
					Position = UDim2.new(0, 0, 0, 38), -- Position below main part
					Size = UDim2.new(1, 0, 0, 0), -- Height controlled by tween
                    Visible = false, -- Start hidden
					ClipsDescendants = true,
                    BorderSizePixel = 1, -- Add border
                    BorderColor3 = theme.Stroke,
                    AutomaticCanvasSize = Enum.AutomaticSize.Y, -- Automatic canvas size
                    ZIndex = 3 -- Above other elements when open
				}), "Second")
                 local containerStroke = AddThemeObject(Create("UIStroke", {Color=theme.Stroke, Thickness = 1}), "Stroke")
                 containerStroke.Parent = DropdownContainer


				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0),
                    ZIndex = 2 -- Above labels
				})

				local DropdownFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 5), {
					Size = UDim2.new(1, 0, 0, 38), -- Initial height
					Parent = ItemParent,
					ClipsDescendants = true, -- Clip dropdown initially
                    ZIndex = 2 -- Ensure frame is above others unless dropdown open
				}), {
					-- DropdownContainer will be parented here when opened/closed to manage ZIndex properly
					SetChildren(SetProps(MakeElement("TFrame"), { -- Frame for the main display part
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundTransparency = 1,
                        ClipsDescendants = true,
                        Name = "F"
                    }), {
						AddThemeObject(SetProps(MakeElement("Label", DropdownConfig.Name, 14), { -- Use 14 for consistency
							Size = UDim2.new(0.5, -10, 1, 0), -- Half width for name
							Position = UDim2.new(0, 10, 0, 0),
							Font = Enum.Font.GothamBold,
							Name = "Content",
                            TextXAlignment = Enum.TextXAlignment.Left,
                            TextYAlignment = Enum.TextYAlignment.Center
						}), "Text"),
						AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://6034849716"), { -- Chevron Down Icon
							Size = UDim2.new(0, 16, 0, 16),
							AnchorPoint = Vector2.new(1, 0.5),
							Position = UDim2.new(1, -10, 0.5, 0),
							ImageColor3 = theme.TextDark, -- Use TextDark color
							Name = "Ico",
                            Rotation = 0 -- Initial rotation
						}), "TextDark"),
						AddThemeObject(SetProps(MakeElement("Label", "...", 13), { -- Selected value display
							Size = UDim2.new(0.5, -30, 1, 0), -- Half width minus icon/padding
                            AnchorPoint = Vector2.new(1, 0),
							Position = UDim2.new(1, -30, 0, 0), -- Position before icon
							Font = Enum.Font.Gotham,
							Name = "Selected",
							TextXAlignment = Enum.TextXAlignment.Right,
                            TextYAlignment = Enum.TextYAlignment.Center
						}), "TextDark"),
						AddThemeObject(SetProps(MakeElement("Frame"), { -- Divider line when open
							Size = UDim2.new(1, 0, 0, 1),
							Position = UDim2.new(0, 0, 1, 0), -- Position at bottom
							Name = "Line",
							Visible = false -- Hidden initially
						}), "Stroke"),
						Click
					}),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
				}), "Second")

                local frameContent = DropdownFrame:FindFirstChild("F")
                local dropdownIcon = frameContent and frameContent:FindFirstChild("Ico")
                local dropdownLine = frameContent and frameContent:FindFirstChild("Line")
                local selectedLabel = frameContent and frameContent:FindFirstChild("Selected")

				AddConnection(DropdownList:GetPropertyChangedSignal("AbsoluteContentSize"), function()
                    -- Update container size based on content, respecting MaxElements
                    local contentHeight = DropdownList.AbsoluteContentSize.Y
                    local visibleHeight = contentHeight -- Start with full height
                    local currentItemCount = #DropdownList:GetChildren()
                    if currentItemCount > MaxElements then
                        -- Calculate height for MaxElements items + padding
                         visibleHeight = (MaxElements * 28) + ((MaxElements - 1) * 2) -- Item height + padding between items
                    end
                    if Dropdown.Toggled then
                        DropdownContainer.Size = UDim2.new(1, 0, 0, visibleHeight + 4) -- Add padding top/bottom for scrollframe
                    end
				end)

                local function CreateOptionButton(Option)
                    local OptionBtn = AddThemeObject(SetProps(SetChildren(MakeElement("Button"), {
                        AddThemeObject(SetProps(MakeElement("Label", Option, 13), {
                            Position = UDim2.new(0, 8, 0, 0),
                            Size = UDim2.new(1, -16, 1, 0),
                            Name = "Title",
                            TextXAlignment = Enum.TextXAlignment.Left,
                            TextYAlignment = Enum.TextYAlignment.Center,
                            Font = Enum.Font.Gotham
                        }), "Text"),
                        MakeElement("Corner", 0, 4) -- Round corners for selection highlight
                    }), {
                        Parent = DropdownContainer,
                        Name = Option, -- Use option text as name for easy finding
                        Size = UDim2.new(1, 0, 0, 28), -- Fixed height for options
                        BackgroundTransparency = 1,
                        ClipsDescendants = true,
                        LayoutOrder = table.find(Dropdown.Options, Option) or 0
                    }), "Divider") -- Use Divider for background highlight on selection

                    local optOriginalColor = OptionBtn.BackgroundColor3
                    local optHoverColor = theme.Divider -- Use Divider color for hover

                    AddConnection(OptionBtn.MouseEnter, function()
                        if Dropdown.Value ~= Option then
                            OptionBtn.BackgroundColor3 = optHoverColor
                            OptionBtn.BackgroundTransparency = 0.8
                        end
                    end)
                    AddConnection(OptionBtn.MouseLeave, function()
                         if Dropdown.Value ~= Option then
                            OptionBtn.BackgroundColor3 = optOriginalColor -- Revert color? Or just transparency?
                            OptionBtn.BackgroundTransparency = 1
                        end
                    end)

                    AddConnection(OptionBtn.MouseButton1Click, function()
                        Dropdown:Set(Option)
                        if DropdownConfig.Flag and OrionLib.SaveCfg then SaveCfg(game.GameId) end
                        -- Close dropdown after selection
                        Dropdown.Toggled = false
                        if dropdownIcon then TweenService:Create(dropdownIcon,TweenInfo.new(.15, Enum.EasingStyle.Quad),{Rotation = 0}):Play() end
                        DropdownFrame.ClipsDescendants = true
                        DropdownFrame.ZIndex = 2
                        DropdownContainer.Visible = false
                        DropdownContainer.Parent = ItemParent -- Re-parent to avoid ZIndex issues
                        TweenService:Create(DropdownFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad),{Size = UDim2.new(1, 0, 0, 38)}):Play()
                        if dropdownLine then dropdownLine.Visible = false end
                    end)
                    Dropdown.Buttons[Option] = OptionBtn
                end

				local function AddOptions(Options)
					for _, Option in pairs(Options) do
                        if not Dropdown.Buttons[Option] then -- Only create if not exists
						    CreateOptionButton(Option)
                        end
					end
				end

				function Dropdown:Refresh(NewOptions, Delete)
                    local currentSelection = self.Value
                    if Delete then
						for _,v in pairs(Dropdown.Buttons) do
							v:Destroy()
						end
						Dropdown.Buttons = {}
                        Dropdown.Options = {}
					end

                    -- Add only new options
                    for _, opt in ipairs(NewOptions) do
                         if not table.find(Dropdown.Options, opt) then
                              table.insert(Dropdown.Options, opt)
                              CreateOptionButton(opt) -- Create button for new option
                         end
                    end

                    -- Re-validate selection if it was deleted or invalid
                    if not table.find(Dropdown.Options, currentSelection) then
                         self:Set(Dropdown.Options[1] or "...") -- Set to first option or placeholder
                    else
                         self:Set(currentSelection) -- Re-apply selection highlight
                    end
				end

				function Dropdown:Set(Value, fromLoad)
                    local optionFound = table.find(Dropdown.Options, Value)
					if not optionFound then
                        -- Value not in options, display it but don't highlight anything
                        Dropdown.Value = Value -- Store the attempted value
                        if selectedLabel then selectedLabel.Text = tostring(Value) end -- Display what was attempted
                        warn("Dropdown '" .. DropdownConfig.Name .. "' - Attempted to set invalid value:", Value)
						for _, btn in pairs(Dropdown.Buttons) do
                            if btn and btn:FindFirstChild("Title") then
                                btn.BackgroundTransparency = 1 -- Reset background
                                btn.Title.Font = Enum.Font.Gotham -- Reset font
                            end
						end
						return
					end

                    if self.Value == Value and not fromLoad then return end -- Avoid unnecessary updates

					Dropdown.Value = Value
					if selectedLabel then selectedLabel.Text = Dropdown.Value end

					for opt, btn in pairs(Dropdown.Buttons) do
                         if btn and btn:FindFirstChild("Title") then
                             if opt == Value then
                                 btn.BackgroundTransparency = 0 -- Highlight selected
                                 btn.Title.Font = Enum.Font.GothamBold -- Bold selected
                             else
                                 btn.BackgroundTransparency = 1 -- Unhighlight others
                                 btn.Title.Font = Enum.Font.Gotham -- Regular font
                             end
                         end
					end

                    if not fromLoad then
					    pcall(DropdownConfig.Callback, Dropdown.Value)
                    end
				end

				AddConnection(Click.MouseButton1Click, function()
					Dropdown.Toggled = not Dropdown.Toggled
                    if dropdownLine then dropdownLine.Visible = Dropdown.Toggled end
                    DropdownFrame.ClipsDescendants = not Dropdown.Toggled -- Allow dropdown to expand

                    if Dropdown.Toggled then
                        -- Move container into frame and make visible for correct ZIndex
                        DropdownContainer.Parent = DropdownFrame
                        DropdownContainer.Visible = true
                        DropdownFrame.ZIndex = 3 -- Bring frame to front when open
                         -- Calculate target height
                        local contentHeight = DropdownList.AbsoluteContentSize.Y
                        local visibleHeight = contentHeight
                        local currentItemCount = #DropdownList:GetChildren()
                        if currentItemCount > MaxElements then
                             visibleHeight = (MaxElements * 28) + ((MaxElements - 1) * 2)
                        end
                        local targetHeight = 38 + visibleHeight + 4 -- Base height + dropdown height + padding

                        if dropdownIcon then TweenService:Create(dropdownIcon,TweenInfo.new(.15, Enum.EasingStyle.Quad),{Rotation = 180}):Play() end
					    TweenService:Create(DropdownFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad),{Size = UDim2.new(1, 0, 0, targetHeight)}):Play()
                        DropdownContainer.Size = UDim2.new(1, 0, 0, visibleHeight + 4) -- Set container size immediately
                    else
                         DropdownFrame.ZIndex = 2 -- Return to normal ZIndex
                         if dropdownIcon then TweenService:Create(dropdownIcon,TweenInfo.new(.15, Enum.EasingStyle.Quad),{Rotation = 0}):Play() end
                         TweenService:Create(DropdownFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad),{Size = UDim2.new(1, 0, 0, 38)}):Play()
                         task.delay(0.15, function() -- Wait for tween before hiding/reparenting
                            if not Dropdown.Toggled then -- Check toggle state again in case reopened quickly
                                DropdownContainer.Visible = false
                                DropdownContainer.Parent = ItemParent -- Reparent back
                            end
                         end)
                    end
				end)

				AddOptions(Dropdown.Options) -- Create initial buttons
				Dropdown:Set(Dropdown.Value, true) -- Set initial value without callback

				if DropdownConfig.Flag then
					OrionLib.Flags[DropdownConfig.Flag] = Dropdown
				end
				return Dropdown
			end
			function ElementFunction:AddBind(BindConfig) -- Copied from previous
				BindConfig = BindConfig or {}
				BindConfig.Name = BindConfig.Name or "Bind"
				BindConfig.Default = BindConfig.Default or Enum.KeyCode.None -- Use None as default
				BindConfig.Hold = BindConfig.Hold or false
				BindConfig.Callback = BindConfig.Callback or function(...) print("Bind '" .. BindConfig.Name .. "' triggered.", ...) end
				BindConfig.Flag = BindConfig.Flag or nil
				BindConfig.Save = BindConfig.Save or false

                -- Ensure Default is an EnumItem if possible
                if type(BindConfig.Default) == "string" then
                    BindConfig.Default = Enum.KeyCode[BindConfig.Default] or Enum.UserInputType[BindConfig.Default] or Enum.KeyCode.None
                elseif typeof(BindConfig.Default) ~= "EnumItem" then
                    BindConfig.Default = Enum.KeyCode.None
                end

				local Bind = {Value = BindConfig.Default, Binding = false, Type = "Bind", Save = BindConfig.Save}
				local Holding = false
                local CurrentKeyDown = nil -- Track currently held key for Hold mode

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0),
                    ZIndex = 2
				})

				local BindBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Main, 0, 4), { -- Use Main theme color
					Size = UDim2.new(0, 80, 0, 24), -- Start with fixed width
					Position = UDim2.new(1, -10, 0.5, 0), -- Position right
					AnchorPoint = Vector2.new(1, 0.5),
                    ClipsDescendants = true
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					AddThemeObject(SetProps(MakeElement("Label", "...", 13), { -- Key display
						Size = UDim2.new(1, -10, 1, 0), -- Padding L/R
                        Position = UDim2.new(0.5, 0, 0.5, 0),
                        AnchorPoint = Vector2.new(0.5, 0.5),
						Font = Enum.Font.GothamBold,
						TextXAlignment = Enum.TextXAlignment.Center,
                        TextYAlignment = Enum.TextYAlignment.Center,
						Name = "Value"
					}), "Text")
				}), "Main")

				local BindFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", BindConfig.Name, 14), {
						Size = UDim2.new(1, -100, 1, 0), -- Adjust size based on bind box initial width
						Position = UDim2.new(0, 10, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content",
                        TextXAlignment = Enum.TextXAlignment.Left,
                        TextYAlignment = Enum.TextYAlignment.Center
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					BindBox,
					Click
				}), "Second")

                local valueLabel = BindBox:FindFirstChild("Value")
                if valueLabel then
				    AddConnection(valueLabel:GetPropertyChangedSignal("Text"), function()
                        task.wait() -- Allow text bounds to update
					    local textWidth = valueLabel.TextBounds.X
					    local newWidth = math.clamp(textWidth + 20, 40, 150) -- Add padding, clamp min/max width
					    TweenService:Create(BindBox, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {Size = UDim2.new(0, newWidth, 0, 24)}):Play()
				    end)
                end

                local bindListener -- Connection for listening to keys while binding

				AddConnection(Click.MouseButton1Click, function(Input)
                    if not valueLabel then return end -- Ensure label exists
					if Bind.Binding then return end -- Already binding
					Bind.Binding = true
					valueLabel.Text = "..."
                    BindBox.BackgroundColor3 = theme.Divider -- Indicate binding state visually

                    -- Disconnect previous listener if any
                    if bindListener then pcall(function() bindListener:Disconnect() end) bindListener = nil end

                    -- Start listening for the next input
                    bindListener = AddConnection(UserInputService.InputBegan, function(bindInput, gameProcessed)
                        if gameProcessed then return end
                        if Bind.Binding then -- Still in binding mode
                            local key = bindInput.KeyCode
                            local inputType = bindInput.UserInputType

                            local keyToSet = Enum.KeyCode.None -- Default to None

                            if key ~= Enum.KeyCode.Unknown and not CheckKey(BlacklistedKeys, key) then
                                keyToSet = key
                            elseif CheckKey(WhitelistedMouse, inputType) then
                                keyToSet = inputType
                            elseif key == Enum.KeyCode.Escape then -- Allow Escape to cancel binding
                                keyToSet = Bind.Value -- Revert to original value (before binding started)
                            end

                            -- Check if a valid key was pressed or Escape was used to cancel
                            if keyToSet ~= Enum.KeyCode.None or key == Enum.KeyCode.Escape then
                                Bind:Set(keyToSet)
                                -- Stop listening once a key is set or cancelled
                                Bind.Binding = false
                                BindBox.BackgroundColor3 = theme.Main -- Revert background
                                if bindListener then pcall(function() bindListener:Disconnect() end) bindListener = nil end
                            end
                        end
                    end)
				end)

                -- Main input listeners for triggering the bind
                local inputBeganConn_Trigger, inputEndedConn_Trigger

                inputBeganConn_Trigger = AddConnection(UserInputService.InputBegan, function(Input, GameProcessed)
					if GameProcessed or UserInputService:GetFocusedTextBox() or Bind.Binding then return end

                    local currentBind = Bind.Value
                    if not currentBind or currentBind == Enum.KeyCode.None then return end -- No bind set

					if Input.KeyCode == currentBind or Input.UserInputType == currentBind then
                        if BindConfig.Hold then
                            if not Holding then -- Prevent rapid re-triggering
                                Holding = true
                                CurrentKeyDown = currentBind -- Store the key that triggered hold
                                pcall(BindConfig.Callback, true) -- Call with true (pressed)
                            end
                        else
                            pcall(BindConfig.Callback) -- Call normal callback
                        end
					end
				end)

				inputEndedConn_Trigger = AddConnection(UserInputService.InputEnded, function(Input, GameProcessed)
                    local currentBind = Bind.Value
                    if not currentBind or currentBind == Enum.KeyCode.None then return end

                    -- Only trigger release if hold mode is active and the released key matches the one held down
					if BindConfig.Hold and Holding and (Input.KeyCode == CurrentKeyDown or Input.UserInputType == CurrentKeyDown) then
                        Holding = false
                        CurrentKeyDown = nil -- Clear the held key
                        pcall(BindConfig.Callback, false) -- Call with false (released)
					end
				end)


                local originalColor = BindFrame.BackgroundColor3
                local hoverColor = originalColor:Lerp(Color3.new(1,1,1), 0.1)
                local pressColor = originalColor:Lerp(Color3.new(1,1,1), 0.2)

				AddConnection(Click.MouseEnter, function()
                    if not Bind.Binding then
					    TweenService:Create(BindFrame, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {BackgroundColor3 = hoverColor}):Play()
                    end
				end)

				AddConnection(Click.MouseLeave, function()
                    if not Bind.Binding then
					    TweenService:Create(BindFrame, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {BackgroundColor3 = originalColor}):Play()
                    end
				end)

				AddConnection(Click.MouseButton1Down, function()
                    if not Bind.Binding then
					    TweenService:Create(BindFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = pressColor}):Play()
                    end
				end)
                AddConnection(Click.MouseButton1Up, function()
                    if not Bind.Binding and not (valueLabel and valueLabel.Text == "...") then
                        TweenService:Create(BindFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = hoverColor}):Play()
                    elseif not Bind.Binding then
                         TweenService:Create(BindFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = originalColor}):Play()
                    end
                end)

				function Bind:Set(Key, fromLoad)
					Bind.Binding = false -- Ensure binding mode is off
                    BindBox.BackgroundColor3 = theme.Main -- Revert background color
					Bind.Value = Key or Enum.KeyCode.None -- Default to None if Key is nil

                    if valueLabel then
                        if typeof(Bind.Value) == "EnumItem" then
                            local keyName = Bind.Value.Name
                            if Bind.Value.Value >= Enum.UserInputType.MouseButton1.Value and Bind.Value.Value <= Enum.UserInputType.MouseButton3.Value then
                                keyName = "Mouse" .. string.sub(keyName, string.len("MouseButton")+1) -- Shorten MouseButton names
                            elseif keyName == "None" then
                                keyName = "None"
                            end
					        valueLabel.Text = keyName
                        else
                            valueLabel.Text = "None" -- Fallback if not EnumItem
                            Bind.Value = Enum.KeyCode.None -- Reset to None
                            warn("Orion Library Bind: Invalid key type set:", Key)
                        end
                    end

                    if not fromLoad and BindConfig.Flag and OrionLib.SaveCfg then SaveCfg(game.GameId) end -- Save on change
				end

				Bind:Set(BindConfig.Default, true) -- Initial set
				if BindConfig.Flag then
					OrionLib.Flags[BindConfig.Flag] = Bind
				end
				return Bind
			end
			function ElementFunction:AddTextbox(TextboxConfig) -- Copied from previous
				TextboxConfig = TextboxConfig or {}
				TextboxConfig.Name = TextboxConfig.Name or "Textbox"
				TextboxConfig.Default = TextboxConfig.Default or ""
                TextboxConfig.Placeholder = TextboxConfig.Placeholder or "Input..." -- Added placeholder option
				TextboxConfig.TextDisappear = TextboxConfig.TextDisappear or false -- Clear on focus lost
				TextboxConfig.Callback = TextboxConfig.Callback or function(val) print("Textbox '" .. TextboxConfig.Name .. "' submitted: " .. tostring(val)) end
                TextboxConfig.Numeric = TextboxConfig.Numeric or false -- Numeric only option
                TextboxConfig.MaxLength = TextboxConfig.MaxLength or 200 -- Max length
                TextboxConfig.Flag = TextboxConfig.Flag or nil
                TextboxConfig.Save = TextboxConfig.Save or false

                local Textbox = {Value = TextboxConfig.Default, Type = "Textbox", Save = TextboxConfig.Save}

				local TextboxActual = AddThemeObject(Create("TextBox", {
					Size = UDim2.new(1, -16, 1, -4), -- Padding inside the box L/R, T/B
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					PlaceholderColor3 = theme.TextDark,
					PlaceholderText = TextboxConfig.Placeholder,
					Font = Enum.Font.GothamSemibold,
					TextXAlignment = Enum.TextXAlignment.Left, -- Align left
                    TextYAlignment = Enum.TextYAlignment.Center,
					TextSize = 14,
					ClearTextOnFocus = false, -- Handle disappear manually
                    MultiLine = false, -- Single line default
                    ZIndex = 2
				}), "Text")
                if TextboxConfig.Numeric then TextboxActual.Text = string.gsub(TextboxConfig.Default, "[^%d%.%-]", "") -- Filter initial value if numeric
                else TextboxActual.Text = TextboxConfig.Default end
                Textbox.Value = TextboxActual.Text -- Sync initial value

				local TextContainer = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Main, 0, 4), { -- Use Main color for background
					Size = UDim2.new(0.6, 0, 0, 24), -- Start with fixed relative width
                    Position = UDim2.new(1, -10, 0.5, 0),
                    AnchorPoint = Vector2.new(1, 0.5),
                    ClipsDescendants = true,
                    -- AutomaticSize = Enum.AutomaticSize.X -- Allow horizontal expansion if needed? Let's keep fixed width for consistency
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					TextboxActual
				}), "Main")

				local TextboxFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", TextboxConfig.Name, 14), {
						Size = UDim2.new(0.4, -15, 1, 0), -- Adjust size based on text container
						Position = UDim2.new(0, 10, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content",
                        TextXAlignment = Enum.TextXAlignment.Left,
                        TextYAlignment = Enum.TextYAlignment.Center
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					TextContainer
				}), "Second")

				AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), function()
                    local newText = TextboxActual.Text
                    if TextboxConfig.Numeric then
                        newText = string.gsub(newText, "[^%d%.%-]", "") -- Filter non-numeric chars
                        -- Prevent multiple decimal points or hyphens not at start
                        local firstChar = string.sub(newText, 1, 1)
                        local decimals = 0
                        local hyphens = 0
                        for i = 1, #newText do
                            local char = string.sub(newText, i, i)
                            if char == "." then decimals = decimals + 1 end
                            if char == "-" then hyphens = hyphens + 1 end
                        end

                        if decimals > 1 then newText = string.gsub(newText, "%.", "", 2) end -- Remove second+ decimal
                        if hyphens > 1 or (hyphens == 1 and firstChar ~= "-") then newText = string.gsub(newText, "-", "") end -- Remove second+ hyphen or misplaced hyphen
                        if hyphens == 1 and firstChar ~= "-" then -- If a hyphen exists but not at start, remove it and potentially add back if original started with it
                           if string.sub(TextboxActual.Text, 1, 1) == "-" then newText = "-" .. string.gsub(newText,"-","") else newText = string.gsub(newText,"-","") end
                        end
                    end
                    -- Enforce MaxLength
                    if string.len(newText) > TextboxConfig.MaxLength then
                        newText = string.sub(newText, 1, TextboxConfig.MaxLength)
                    end

                    if TextboxActual.Text ~= newText then -- Only update if text was changed by filtering/limiting
                        TextboxActual.Text = newText
                    end
                    Textbox.Value = newText -- Update internal value
				end)

				AddConnection(TextboxActual.FocusLost, function(enterPressed)
                    Textbox.Value = TextboxActual.Text -- Sync value on focus lost regardless of enter
                    if enterPressed then -- Callback only on Enter press
					    pcall(TextboxConfig.Callback, TextboxActual.Text)
                        if TextboxConfig.Flag and OrionLib.SaveCfg then SaveCfg(game.GameId) end -- Save on submit
					    if TextboxConfig.TextDisappear then
						    TextboxActual.Text = ""
                            Textbox.Value = ""
					    end
                    elseif TextboxConfig.Flag and OrionLib.SaveCfg then -- Save on focus lost if not enterPressed (optional, depends on desired behavior)
                         -- SaveCfg(game.GameId) -- Uncomment to save on losing focus too
                    end
				end)

                 function Textbox:Set(value, fromLoad)
                     local textValue = tostring(value or "")
                     if TextboxConfig.Numeric then textValue = string.gsub(textValue, "[^%d%.%-]", "") end
                     if string.len(textValue) > TextboxConfig.MaxLength then textValue = string.sub(textValue, 1, TextboxConfig.MaxLength) end

                     TextboxActual.Text = textValue
                     Textbox.Value = textValue
                     if not fromLoad and TextboxConfig.Flag and OrionLib.SaveCfg then
                         SaveCfg(game.GameId)
                     end
                 end

                 -- Initial set
                 Textbox:Set(Textbox.Value, true)

                 if TextboxConfig.Flag then
                     OrionLib.Flags[TextboxConfig.Flag] = Textbox
                 end
                 return Textbox
			end
			function ElementFunction:AddColorpicker(ColorpickerConfig) -- Copied from previous
				ColorpickerConfig = ColorpickerConfig or {}
				ColorpickerConfig.Name = ColorpickerConfig.Name or "Colorpicker"
				ColorpickerConfig.Default = ColorpickerConfig.Default or Color3.fromRGB(255,255,255)
				ColorpickerConfig.Callback = ColorpickerConfig.Callback or function(val) print("Colorpicker '" .. ColorpickerConfig.Name .. "' set to " .. tostring(val)) end
				ColorpickerConfig.Flag = ColorpickerConfig.Flag or nil
				ColorpickerConfig.Save = ColorpickerConfig.Save or false

				local ColorH, ColorS, ColorV = Color3.toHSV(ColorpickerConfig.Default)
				local Colorpicker = {Value = ColorpickerConfig.Default, Toggled = false, Type = "Colorpicker", Save = ColorpickerConfig.Save}
                local PickerDragging = nil -- 'Hue' or 'Color' or nil
                local ColorInputConn, HueInputConn -- Connections for RenderStepped updates

				local ColorSelection = Create("ImageLabel", { -- Small circle for selection
					Size = UDim2.new(0, 12, 0, 12),
					Position = UDim2.new(ColorS, 0, 1 - ColorV, 0), -- Map S/V to X/Y
					ScaleType = Enum.ScaleType.Fit,
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					Image = "rbxassetid://4805639000", -- Circle image
                    ImageColor3 = ColorV > 0.5 and Color3.new(0,0,0) or Color3.new(1,1,1), -- Black/white based on V
                    ZIndex = 4
				})

				local HueSelection = Create("Frame", { -- Line/Indicator for Hue
					Size = UDim2.new(1, 4, 0, 4), -- Wider line across hue bar
					Position = UDim2.new(0.5, 0, ColorH, 0), -- Map H to Y (0=Top Red, 1=Bottom Red)
                    AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 0.5,
					BackgroundColor3 = Color3.new(0,0,0), -- Black line
                    BorderSizePixel = 0,
                    ZIndex = 4
				})

				local Color = Create("Frame", { -- Saturation/Value Box
					Size = UDim2.new(1, -35, 1, 0), -- Size minus hue bar and padding
					Position = UDim2.new(0,0,0,0),
                    Visible = false,
                    BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1), -- Full saturation/value based on Hue
                    ZIndex = 2
				}, {
					Create("UIGradient", { -- Saturation gradient (Left to Right)
                        Rotation = 90,
                        Color = ColorSequence.new{
                            ColorSequenceKeypoint.new(0.00, Color3.new(1, 1, 1)), -- White at left (S=0)
                            ColorSequenceKeypoint.new(1.00, Color3.fromHSV(ColorH, 1, 1)) -- Full Saturation at right (S=1)
                        },
                        Transparency = NumberSequence.new(0),
                        Name = "SaturationGradient"
                    }),
                    Create("UIGradient", { -- Value gradient (Top to Bottom) - Black overlay
                        Rotation = 180,
                        Color = ColorSequence.new(Color3.new(0,0,0)), -- Black
                        Transparency = NumberSequence.new{ -- Fade from transparent (V=1 at top) to opaque black (V=0 at bottom)
                            NumberSequenceKeypoint.new(0, 0),
                            NumberSequenceKeypoint.new(1, 1)
                        },
                        Name = "ValueGradient"
                    }),
					Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
					ColorSelection
				})

				local Hue = Create("Frame", { -- Hue Bar
					Size = UDim2.new(0, 20, 1, 0),
					Position = UDim2.new(1, -20, 0, 0), -- Position right
					Visible = false,
                    ZIndex = 2
				}, {
                    -- Hue gradient (Top to Bottom: Red -> Yellow -> Green -> Cyan -> Blue -> Magenta -> Red)
					Create("UIGradient", {Rotation = 180, Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),    -- Red
                        ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),  -- Yellow
                        ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),    -- Green
                        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)),  -- Cyan
                        ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),    -- Blue
                        ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),  -- Magenta
                        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 0))     -- Red again
                        }}),
					Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
					HueSelection
				})

				local ColorpickerContainer = Create("Frame", { -- Container for picker elements
					Position = UDim2.new(0, 0, 0, 38), -- Below main part
					Size = UDim2.new(1, 0, 0, 120), -- Fixed height for picker area
					BackgroundTransparency = 1,
                    Visible = false, -- Start hidden
					ClipsDescendants = true,
                    ZIndex = 3
				}, {
					Hue,
					Color,
					Create("UIPadding", { -- Padding around Hue and Color elements
						PaddingLeft = UDim.new(0, 10),
						PaddingRight = UDim.new(0, 10),
						PaddingBottom = UDim.new(0, 10),
						PaddingTop = UDim.new(0, 10)
					})
				})

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0),
                    ZIndex = 2
				})

				local ColorpickerBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Colorpicker.Value, 0, 4), { -- Display selected color
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -10, 0.5, 0), -- Position right
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Value") -- Theme based on the color itself

				local ColorpickerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 5), {
					Size = UDim2.new(1, 0, 0, 38), -- Initial height
					Parent = ItemParent,
                    ClipsDescendants = true,
                    ZIndex = 2
				}), {
					SetChildren(SetProps(MakeElement("TFrame"), { -- Frame for top part
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundTransparency = 1,
                        Name = "F",
                        ClipsDescendants = true
                    }), {
						AddThemeObject(SetProps(MakeElement("Label", ColorpickerConfig.Name, 14), {
							Size = UDim2.new(1, -44, 1, 0), -- Size minus color box and padding
							Position = UDim2.new(0, 10, 0, 0),
							Font = Enum.Font.GothamBold,
							Name = "Content",
                            TextXAlignment = Enum.TextXAlignment.Left,
                            TextYAlignment = Enum.TextYAlignment.Center
						}), "Text"),
						ColorpickerBox,
						Click,
						AddThemeObject(SetProps(MakeElement("Frame"), { -- Divider line when open
							Size = UDim2.new(1, 0, 0, 1),
							Position = UDim2.new(0, 0, 1, 0), -- Position at bottom of top part
							Name = "Line",
							Visible = false
						}), "Stroke"),
					}),
					ColorpickerContainer, -- Add picker container
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
				}), "Second")

                local frameContent = ColorpickerFrame:FindFirstChild("F")
                local pickerLine = frameContent and frameContent:FindFirstChild("Line")

				AddConnection(Click.MouseButton1Click, function()
					Colorpicker.Toggled = not Colorpicker.Toggled
                    ColorpickerFrame.ClipsDescendants = not Colorpicker.Toggled
                    ColorpickerFrame.ZIndex = Colorpicker.Toggled and 3 or 2

                    if Colorpicker.Toggled then
                         ColorpickerContainer.Visible = true
                         Color.Visible = true
                         Hue.Visible = true
                         if pickerLine then pickerLine.Visible = true end
                         TweenService:Create(ColorpickerFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad),{Size = UDim2.new(1, 0, 0, 38 + 120)}):Play() -- Expand height
                    else
                         TweenService:Create(ColorpickerFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad),{Size = UDim2.new(1, 0, 0, 38)}):Play() -- Collapse height
                         task.delay(0.15, function()
                             if not Colorpicker.Toggled then -- Check state again before hiding
                                 ColorpickerContainer.Visible = false
                                 Color.Visible = false
                                 Hue.Visible = false
                                 if pickerLine then pickerLine.Visible = false end
                             end
                         end)
                    end
				end)

				local function UpdateColorPicker()
                    local newColor = Color3.fromHSV(ColorH, ColorS, ColorV)
                    ColorpickerBox.BackgroundColor3 = newColor

                    -- Update picker visuals
                    Color.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1)
                    local satGrad = Color:FindFirstChild("SaturationGradient")
                    if satGrad then satGrad.Color = ColorSequence.new{ ColorSequenceKeypoint.new(0.00, Color3.new(1, 1, 1)), ColorSequenceKeypoint.new(1.00, Color3.fromHSV(ColorH, 1, 1)) } end

                    local selectionIndicatorColor = ColorV > 0.5 and Color3.new(0,0,0) or Color3.new(1,1,1) -- Black or white circle based on Value
                    ColorSelection.ImageColor3 = selectionIndicatorColor

					Colorpicker:Set(newColor) -- Update internal value and call callback
                    -- Save handled within Set now
				end

                local function StopDragging()
                    if ColorInputConn then pcall(function() ColorInputConn:Disconnect() end) ColorInputConn = nil end
                    if HueInputConn then pcall(function() HueInputConn:Disconnect() end) HueInputConn = nil end
                    PickerDragging = nil
                end

				AddConnection(Color.InputBegan, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        StopDragging() -- Stop any other dragging
                        PickerDragging = 'Color'
						ColorInputConn = AddConnection(RunService.RenderStepped, function()
                            if PickerDragging ~= 'Color' then StopDragging() return end
							local mousePos = UserInputService:GetMouseLocation()
                            local framePos = Color.AbsolutePosition
                            local frameSize = Color.AbsoluteSize
                            if frameSize.X == 0 or frameSize.Y == 0 then StopDragging() return end -- Avoid division by zero if frame not rendered yet

							local ColorX = math.clamp((mousePos.X - framePos.X) / frameSize.X, 0, 1)
							local ColorY = math.clamp((mousePos.Y - framePos.Y) / frameSize.Y, 0, 1)
							ColorSelection.Position = UDim2.new(ColorX, 0, ColorY, 0)
							ColorS = ColorX
							ColorV = 1 - ColorY -- Y=0 is Top (V=1), Y=1 is Bottom (V=0)
							UpdateColorPicker()
						end)
					end
				end)

				AddConnection(Hue.InputBegan, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        StopDragging() -- Stop any other dragging
                        PickerDragging = 'Hue'
						HueInputConn = AddConnection(RunService.RenderStepped, function()
                            if PickerDragging ~= 'Hue' then StopDragging() return end
							local mousePos = UserInputService:GetMouseLocation()
                            local framePos = Hue.AbsolutePosition
                            local frameSize = Hue.AbsoluteSize
                            if frameSize.X == 0 or frameSize.Y == 0 then StopDragging() return end -- Avoid division by zero

							local HueY = math.clamp((mousePos.Y - framePos.Y) / frameSize.Y, 0, 1)
							HueSelection.Position = UDim2.new(0.5, 0, HueY, 0)
							ColorH = HueY -- Y=0 is Top (H=0 Red), Y=1 is Bottom (H=1 Red)
							UpdateColorPicker()
						end)
					end
				end)

                -- Stop dragging when mouse is released anywhere
                AddConnection(UserInputService.InputEnded, function(input)
                    if PickerDragging and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
                       StopDragging()
                       if ColorpickerConfig.Flag and OrionLib.SaveCfg then SaveCfg(game.GameId) end -- Save on drag end
                    end
                end)

				function Colorpicker:Set(Value, fromLoad)
                    if typeof(Value) ~= "Color3" then return end -- Ensure it's a color
                    if self.Value:FuzzyEq(Value) and not fromLoad then return end -- No change (use FuzzyEq for colors)

					self.Value = Value
                    ColorpickerBox.BackgroundColor3 = self.Value

                    -- Update HSV values and picker visuals if not currently dragging
                    if not PickerDragging then
                         ColorH, ColorS, ColorV = Color3.toHSV(self.Value)
                         -- Update picker visuals to match new color
                         Color.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1)
                         local satGrad = Color:FindFirstChild("SaturationGradient")
                         if satGrad then satGrad.Color = ColorSequence.new{ ColorSequenceKeypoint.new(0.00, Color3.new(1, 1, 1)), ColorSequenceKeypoint.new(1.00, Color3.fromHSV(ColorH, 1, 1)) } end
                         ColorSelection.Position = UDim2.new(ColorS, 0, 1 - ColorV, 0)
                         HueSelection.Position = UDim2.new(0.5, 0, ColorH, 0)
                         ColorSelection.ImageColor3 = ColorV > 0.5 and Color3.new(0,0,0) or Color3.new(1,1,1)
                    end

					if not fromLoad then
                        pcall(ColorpickerConfig.Callback, self.Value)
                        if ColorpickerConfig.Flag and OrionLib.SaveCfg then SaveCfg(game.GameId) end -- Save on programmatic set too
                    end
				end

				Colorpicker:Set(Colorpicker.Value, true) -- Initial set without callback
				if ColorpickerConfig.Flag then
					OrionLib.Flags[ColorpickerConfig.Flag] = Colorpicker
				end
				return Colorpicker
			end
            return ElementFunction
        end
        -- ======================================================================== --

		local ElementFunction = {} -- Main ElementFunction table for the tab

        -- AddSection Function
		function ElementFunction:AddSection(SectionConfig)
			SectionConfig = SectionConfig or {}
			SectionConfig.Name = SectionConfig.Name or "Section"

            local theme = OrionLib.Themes[OrionLib.SelectedTheme] or OrionLib.Themes.Default

			local SectionFrame = SetChildren(SetProps(MakeElement("TFrame"), { -- Transparent frame holding section title and content holder
				Size = UDim2.new(1, 0, 0, 0), -- Automatic height
                AutomaticSize = Enum.AutomaticSize.Y,
				Parent = Container,
                BackgroundTransparency = 1
			}), {
                AddThemeObject(SetProps(MakeElement("Label", SectionConfig.Name, 14), { -- Section Title Label
                    Size = UDim2.new(1, 0, 0, 20), -- Height for title
                    Position = UDim2.new(0, 0, 0, 0),
                    Font = Enum.Font.GothamSemibold,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextYAlignment = Enum.TextYAlignment.Bottom, -- Align to bottom of its space
                    BackgroundTransparency = 1,
                    TextColor3 = theme.TextDark, -- Use TextDark for section titles
                    LayoutOrder = 1
                }), "TextDark"),
				SetChildren(SetProps(MakeElement("TFrame"), { -- Holder frame for elements within section
                    AnchorPoint = Vector2.new(0, 0),
					Size = UDim2.new(1, 0, 0, 0), -- Automatic Height
                    AutomaticSize = Enum.AutomaticSize.Y,
					Position = UDim2.new(0, 0, 0, 0), -- Position managed by outer ListLayout
					Name = "Holder",
                    BackgroundTransparency = 1,
                    LayoutOrder = 2
				}), {
					MakeElement("List", 0, 6) -- List layout for elements inside section
				}),
                Create("UIListLayout", { -- List layout for Title + Holder Frame
                    Padding = UDim.new(0, 5), -- Padding between title and elements holder
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    FillDirection = Enum.FillDirection.Vertical
                })
			})

			local SectionFunction = {}
            local elementsParent = SectionFrame:FindFirstChild("Holder")
            if elementsParent then
			    for i, v in next, GetElements(elementsParent) do -- Use the GetElements function defined above
				    SectionFunction[i] = v
			    end
            end
			return SectionFunction
		end

		-- Add direct elements to the container
		for i, v in next, GetElements(Container) do -- Use the GetElements function defined above
			ElementFunction[i] = v
		end

        -- Handle PremiumOnly tabs (Simplified approach)
		if TabConfig.PremiumOnly then
            -- Clear existing standard layout/padding before adding placeholder
            for _, child in ipairs(Container:GetChildren()) do
                if child:IsA("UILayout") or child:IsA("UIPadding") then
                    child:Destroy()
                end
            end

            local Placeholder = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", theme.Second, 0, 5), {
                Size = UDim2.new(1, -20, 0, 150), -- Example size, relative width, fixed height
                Position = UDim2.new(0.5, 0, 0, 20), -- Position near top
                AnchorPoint = Vector2.new(0.5, 0),
                Parent = Container,
                BackgroundTransparency = 0.5
            }), {
                AddThemeObject(MakeElement("Stroke"), "Stroke"),
                Create("UIPadding", {PaddingTop=UDim.new(0,10), PaddingBottom=UDim.new(0,10), PaddingLeft=UDim.new(0,10), PaddingRight=UDim.new(0,10)}),
                AddThemeObject(SetProps(MakeElement("Label", "[Private] Required", 16), { -- Changed Text
                     Size = UDim2.new(1,0,0,20), Font = Enum.Font.GothamBold, TextXAlignment = Enum.TextXAlignment.Center, LayoutOrder = 1
                }), "Text"),
                AddThemeObject(SetProps(MakeElement("Label", "This feature requires private access.", 13), { -- Changed Text
                     Size = UDim2.new(1,0,0,40), Font = Enum.Font.Gotham, TextXAlignment = Enum.TextXAlignment.Center, TextWrapped = true, LayoutOrder = 2
                }), "TextDark"),
                Create("UIListLayout", {Padding=UDim.new(0,5), HorizontalAlignment=Enum.HorizontalAlignment.Center, VerticalAlignment=Enum.VerticalAlignment.Center, SortOrder=Enum.SortOrder.LayoutOrder})
            }), "Second")

            -- Disable adding more elements to this tab
			for i, _ in pairs(ElementFunction) do -- Iterate through keys only
				ElementFunction[i] = function() warn("Cannot add elements to a [Private] Only tab.") end
			end
            -- Section function already points to the disabled ElementFunction methods
		end
		return ElementFunction
	end -- End MakeTab

	return TabFunction
end -- End MakeWindow

function OrionLib:Destroy()
    for _, conn in pairs(OrionLib.Connections) do
        pcall(conn.Disconnect, conn) -- Safely disconnect all connections
    end
    OrionLib.Connections = {}
    OrionLib.ThemeObjects = {}
    OrionLib.Flags = {}
    if Orion and Orion.Parent then
	    Orion:Destroy()
    end
    Orion = nil -- Clear reference
end

return OrionLib
