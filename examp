--- START OF FILE message - 2025-04-26T162454.267.txt ---

--[[
	Hydra UI Library
	A simple, modern UI library inspired by the structure of OrionLib.
	Version 1.3 - Fixed dropdown visibility/Z-Index, improved slider responsiveness.
	Features:
		- Draggable Window
		- Tabs
		- Sliders
		- Toggles (Checkboxes)
		- Dropdowns
--]]

local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local HydraLib = {}
HydraLib.__index = HydraLib
HydraLib._windows = {}
local BASE_ZINDEX_COUNTER = 1 -- Start counter for base Z-indices for different windows

--==============================================================================--
--                           INTERNAL HELPER FUNCTIONS                          --
--==============================================================================--
-- These create the actual GUI elements and are not directly called by the user.

local function _createSlider(parent, config)
	local minValue = config.Min or 0
	local maxValue = config.Max or 100
	local initialValue = math.clamp(config.Default or minValue, minValue, maxValue)
	local label = config.Name or "Slider"
	local valueName = config.ValueName or ""
	local increment = config.Increment or 1
    if increment <= 0 then increment = 1 end -- Prevent zero/negative increment
	local callback = config.Callback or function() end

	local container = Instance.new("Frame")
	container.Name = label:gsub("%s+", "") .. "SliderContainer"
	container.Size = UDim2.new(1, 0, 0, 45)
	container.BackgroundTransparency = 1
	container.Parent = parent
	container.LayoutOrder = config._LayoutOrder or 0
    -- Slider elements don't need specific ZIndex relative to base, layout handles order

	local SliderLabel = Instance.new("TextLabel", container)
	SliderLabel.Size = UDim2.new(1, 0, 0, 15)
	SliderLabel.Position = UDim2.new(0, 0, 0, 0)
	SliderLabel.BackgroundTransparency = 1
	SliderLabel.Font = Enum.Font.Gotham
	SliderLabel.TextSize = 14
	SliderLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
	SliderLabel.TextXAlignment = Enum.TextXAlignment.Left

	local SliderFrame = Instance.new("Frame", container)
	SliderFrame.Name = "SliderTrack"
	SliderFrame.Size = UDim2.new(1, 0, 0, 10)
	SliderFrame.Position = UDim2.new(0, 0, 0, 20)
	SliderFrame.BackgroundColor3 = config.TrackColor or Color3.fromRGB(50, 50, 50)
	SliderFrame.BorderSizePixel = 0
	SliderFrame.Active = true -- MUST be active to receive input
	local SliderCorner = Instance.new("UICorner", SliderFrame)
	SliderCorner.CornerRadius = UDim.new(0, 5)

	local Fill = Instance.new("Frame", SliderFrame)
	Fill.Name = "SliderFill"
	Fill.BackgroundColor3 = config.Color or Color3.fromRGB(0, 120, 255)
	Fill.BorderSizePixel = 0
	local FillCorner = Instance.new("UICorner", Fill)
	FillCorner.CornerRadius = UDim.new(0, 5)

	local currentSliderValue = initialValue
	local isDraggingSlider = false
	local dragMoveConnection = nil
	local dragReleaseConnection = nil
	local globalReleaseConnection = nil

	-- Updates display and optionally triggers callback
	-- useTween parameter added for responsiveness control
	local function updateSliderDisplay(ratio, triggerCallback, useTween)
		ratio = math.clamp(ratio, 0, 1)
		local range = maxValue - minValue
		if range <= 0 then range = 1 end -- Avoid division by zero
		local rawValue = minValue + ratio * range
		local steppedValue = math.floor(rawValue / increment + 0.5) * increment
		local finalValue = math.clamp(steppedValue, minValue, maxValue)
		local displayRatio = range > 0 and math.clamp((finalValue - minValue) / range, 0, 1) or 0

		-- Only update visuals/value if it actually changed
		if finalValue ~= currentSliderValue then
			currentSliderValue = finalValue
			local newSize = UDim2.new(displayRatio, 0, 1, 0)

            -- Use direct assignment for dragging, tween otherwise
            if useTween then
                TweenService:Create(Fill, TweenInfo.new(0.07), {Size = newSize}):Play()
            else
                Fill.Size = newSize -- Direct update for responsiveness
            end

			SliderLabel.Text = label .. ": " .. string.format("%.f", currentSliderValue) .. (valueName ~= "" and " " .. valueName or "")
		end

        -- Trigger callback only when specified (usually on press/release)
        if triggerCallback then
            task.spawn(callback, currentSliderValue)
        end
	end

	local function calculateRatioFromInput(input)
		local frameAbsPos = SliderFrame.AbsolutePosition
		local frameAbsSize = SliderFrame.AbsoluteSize
		local relativeX = input.Position.X - frameAbsPos.X
		local totalWidth = frameAbsSize.X
		if totalWidth <= 0 then
             local range = maxValue - minValue
             return range > 0 and math.clamp((currentSliderValue - minValue) / range, 0, 1) or 0 -- Return current ratio if width is zero
        end
		return math.clamp(relativeX / totalWidth, 0, 1)
	end

    local function cleanupConnections()
        UserInputService.MouseIconEnabled = true -- Ensure mouse is shown
        if dragMoveConnection then dragMoveConnection:Disconnect(); dragMoveConnection = nil end
        if dragReleaseConnection then dragReleaseConnection:Disconnect(); dragReleaseConnection = nil end
        if globalReleaseConnection then globalReleaseConnection:Disconnect(); globalReleaseConnection = nil end
    end

	SliderFrame.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and not isDraggingSlider then
			isDraggingSlider = true
			UserInputService.MouseIconEnabled = false -- Hide mouse while dragging slider

            -- Disconnect any lingering connections (safety)
            cleanupConnections()

			local currentRatio = calculateRatioFromInput(input)
			updateSliderDisplay(currentRatio, true, true) -- Update, trigger callback, use tween on initial press

			dragMoveConnection = UserInputService.InputChanged:Connect(function(moveInput)
				if isDraggingSlider and (moveInput.UserInputType == Enum.UserInputType.MouseMovement or moveInput.UserInputType == Enum.UserInputType.Touch) then
					-- Update display directly (no tween) without triggering callback while dragging
                    updateSliderDisplay(calculateRatioFromInput(moveInput), false, false)
				end
			end)

            -- Use global release in case mouse leaves the slider frame
			globalReleaseConnection = UserInputService.InputEnded:Connect(function(endInput)
				if isDraggingSlider and (endInput.UserInputType == Enum.UserInputType.MouseButton1 or endInput.UserInputType == Enum.UserInputType.Touch) then
                    local finalRatio = calculateRatioFromInput(endInput.Position.X > 0 and endInput or UserInputService:GetMouseLocation()) -- Use last known position on release
                    -- Final update on release, trigger callback, allow tween for smooth settle
					updateSliderDisplay(finalRatio, true, true)

					isDraggingSlider = false
					cleanupConnections()
				end
			end)
		end
	end)

	-- Set initial state
	local initialRatio = (maxValue - minValue) > 0 and math.clamp((initialValue - minValue) / (maxValue - minValue), 0, 1) or 0
	updateSliderDisplay(initialRatio, false, false) -- Initial display update, no callback, no tween

	local function setter(newValue)
		if type(newValue) == "number" then
			local range = maxValue - minValue
			if range <= 0 then return end
			local newRatio = math.clamp((newValue - minValue) / range, 0, 1)
			updateSliderDisplay(newRatio, false, true) -- Update display only, allow tween for programmatic set
		end
	end

	return container, setter
end

local function _createToggle(parent, config)
	local labelText = config.Name or "Toggle"
	local initialValue = config.Default or false
	local callback = config.Callback or function() end
	local toggled = initialValue

	local toggleHeight = 25
	local checkboxSize = 18
	local spacing = 8

	local Container = Instance.new("Frame")
	Container.Name = labelText:gsub("%s+", "") .. "ToggleContainer"
	Container.Size = UDim2.new(1, 0, 0, toggleHeight)
	Container.BackgroundTransparency = 1
	Container.Parent = parent
	Container.LayoutOrder = config._LayoutOrder or 0
    -- Toggle elements don't need specific ZIndex relative to base

	local Label = Instance.new("TextLabel")
	Label.Name = "Label"
	Label.Size = UDim2.new(1, -(checkboxSize + spacing), 1, 0)
	Label.Position = UDim2.new(0, 0, 0, 0)
	Label.BackgroundTransparency = 1
	Label.Font = Enum.Font.Gotham
	Label.Text = labelText
	Label.TextColor3 = Color3.fromRGB(220, 220, 220)
	Label.TextSize = 16
	Label.TextXAlignment = Enum.TextXAlignment.Left
	Label.TextYAlignment = Enum.TextYAlignment.Center
	Label.Parent = Container

	local CheckboxFrame = Instance.new("Frame")
	CheckboxFrame.Name = "CheckboxFrame"
	CheckboxFrame.Size = UDim2.new(0, checkboxSize, 0, checkboxSize)
	CheckboxFrame.Position = UDim2.new(1, -checkboxSize, 0.5, -checkboxSize / 2)
	CheckboxFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	CheckboxFrame.BorderSizePixel = 1
	CheckboxFrame.BorderColor3 = Color3.fromRGB(90, 90, 90)
	CheckboxFrame.Parent = Container
	local CheckboxCorner = Instance.new("UICorner", CheckboxFrame)
	CheckboxCorner.CornerRadius = UDim.new(0, 4)

	local Checkmark = Instance.new("Frame", CheckboxFrame)
	Checkmark.Name = "Checkmark"
	Checkmark.Size = UDim2.new(0.7, 0, 0.7, 0)
	Checkmark.Position = UDim2.new(0.5, 0, 0.5, 0)
	Checkmark.AnchorPoint = Vector2.new(0.5, 0.5)
	Checkmark.BackgroundColor3 = config.Color or Color3.fromRGB(0, 180, 90)
	Checkmark.BorderSizePixel = 0
	Checkmark.BackgroundTransparency = toggled and 0 or 1
	local CheckmarkCorner = Instance.new("UICorner", Checkmark)
	CheckmarkCorner.CornerRadius = UDim.new(0, 3)

	local ClickButton = Instance.new("TextButton", Container)
	ClickButton.Name = "ClickArea"
	ClickButton.Size = UDim2.new(1, 0, 1, 0)
	ClickButton.BackgroundTransparency = 1
	ClickButton.Text = ""
	ClickButton.ZIndex = 2 -- Above label/checkbox visuals within the container

	local function updateVisuals(state)
        -- Use tween for smoother visual transition
		TweenService:Create(Checkmark, TweenInfo.new(0.1), {BackgroundTransparency = state and 0 or 1}):Play()
		TweenService:Create(CheckboxFrame, TweenInfo.new(0.1), {BackgroundColor3 = state and Color3.fromRGB(70, 70, 70) or Color3.fromRGB(60, 60, 60)}):Play()
	end

	ClickButton.MouseButton1Click:Connect(function()
		toggled = not toggled
		updateVisuals(toggled)
		task.spawn(callback, toggled)
	end)

	-- Set initial state without tween
	Checkmark.BackgroundTransparency = toggled and 0 or 1
    CheckboxFrame.BackgroundColor3 = toggled and Color3.fromRGB(70, 70, 70) or Color3.fromRGB(60, 60, 60)

	local function setter(newState)
		if type(newState) == "boolean" and newState ~= toggled then
			toggled = newState
			updateVisuals(toggled)
            -- Do not trigger callback on programmatic set
		end
	end

	return Container, setter
end

local function _createDropdown(parent, config, screenGuiRef, baseZIndex)
	local labelText = config.Name or "Dropdown"
	local options = config.Options or {"Option 1"}
	local defaultOption = config.Default
	local callback = config.Callback or function() end

	local selectedIndex = 1
	if defaultOption then
		for i, v in ipairs(options) do
			if v == defaultOption then
				selectedIndex = i
				break
			end
		end
	end
	local selectedOptionText = options[selectedIndex] or "Select..."
	local isOpen = false

	local dropdownBaseHeight = 30
	local labelHeight = 18
	local totalControlHeight = dropdownBaseHeight + labelHeight
	local optionsVisibleMaxHeight = 120 -- Max height before scroll
	local optionHeight = 25

	local Container = Instance.new("Frame")
	Container.Name = labelText:gsub("%s+", "") .. "DropdownContainer"
	Container.Size = UDim2.new(1, 0, 0, totalControlHeight)
	Container.BackgroundTransparency = 1
	Container.ClipsDescendants = false -- IMPORTANT: Start false, only clip when open
	Container.Parent = parent
	Container.LayoutOrder = config._LayoutOrder or 0
	Container.ZIndex = baseZIndex -- Base ZIndex for the dropdown container

	local Label = Instance.new("TextLabel")
	Label.Name = "Label"
	Label.Size = UDim2.new(1, 0, 0, labelHeight)
	Label.Position = UDim2.new(0, 0, 0, 0)
	Label.BackgroundTransparency = 1
	Label.Font = Enum.Font.Gotham
	Label.Text = labelText
	Label.TextColor3 = Color3.fromRGB(200, 200, 200)
	Label.TextSize = 14
	Label.TextXAlignment = Enum.TextXAlignment.Left
	Label.TextYAlignment = Enum.TextYAlignment.Bottom
	Label.Parent = Container
    Label.ZIndex = Container.ZIndex -- Same level as container background

	local DisplayButton = Instance.new("TextButton")
	DisplayButton.Name = "DisplayButton"
	DisplayButton.Size = UDim2.new(1, 0, 0, dropdownBaseHeight)
	DisplayButton.Position = UDim2.new(0, 0, 0, labelHeight)
	DisplayButton.BackgroundColor3 = config.Color or Color3.fromRGB(55, 55, 55)
	DisplayButton.Font = Enum.Font.GothamSemibold
	DisplayButton.Text = selectedOptionText .. " ▼"
	DisplayButton.TextColor3 = Color3.fromRGB(210, 210, 210)
	DisplayButton.TextSize = 14
	DisplayButton.TextXAlignment = Enum.TextXAlignment.Left
    DisplayButton.AutoButtonColor = false -- Disable default color change
	DisplayButton.Parent = Container
    DisplayButton.ZIndex = Container.ZIndex + 1 -- Slightly above container background
	local DisplayCorner = Instance.new("UICorner", DisplayButton)
	DisplayCorner.CornerRadius = UDim.new(0, 6)
	local DisplayPadding = Instance.new("UIPadding", DisplayButton)
	DisplayPadding.PaddingLeft = UDim.new(0, 8)
	DisplayPadding.PaddingRight = UDim.new(0, 8)

	local OptionsFrame = Instance.new("ScrollingFrame")
	OptionsFrame.Name = "OptionsFrame"
	OptionsFrame.Size = UDim2.new(1, 0, 0, 0) -- Start hidden and sized later
	OptionsFrame.Position = UDim2.new(0, 0, 1, 2) -- Position below the button
	OptionsFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
	OptionsFrame.BorderSizePixel = 1
	OptionsFrame.BorderColor3 = Color3.fromRGB(70, 70, 70)
	OptionsFrame.Visible = false -- Start hidden
	OptionsFrame.ClipsDescendants = true -- Options frame itself always clips content
	OptionsFrame.Parent = Container
	OptionsFrame.ZIndex = baseZIndex + 100 -- Significantly higher ZIndex for options overlay
	OptionsFrame.ScrollBarThickness = 5
	OptionsFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
	OptionsFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    OptionsFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y -- Let layout handle canvas height
    OptionsFrame.CanvasPosition = Vector2.new()
	local OptionsCorner = Instance.new("UICorner", OptionsFrame)
	OptionsCorner.CornerRadius = UDim.new(0, 6)
	local OptionsLayout = Instance.new("UIListLayout", OptionsFrame)
	OptionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
	OptionsLayout.Padding = UDim.new(0, 2)
	local OptionsPadding = Instance.new("UIPadding", OptionsFrame)
	OptionsPadding.PaddingTop = UDim.new(0, 4)
	OptionsPadding.PaddingBottom = UDim.new(0, 4)
	OptionsPadding.PaddingLeft = UDim.new(0, 4)
	OptionsPadding.PaddingRight = UDim.new(0, 4)

	local currentDismissButton = nil
	local currentDismissConn = nil

	local function closeDropdown(triggerCallback, newIndex, newText)
		if not isOpen then return end
		isOpen = false

        -- Update selection state if changed
        local oldIndex = selectedIndex
        if newIndex and newText then
            selectedIndex = newIndex
            selectedOptionText = newText
        end
		DisplayButton.Text = selectedOptionText .. " ▼" -- Update button text

        -- Reset container state *after* hiding options
		OptionsFrame.Visible = false
        Container.ClipsDescendants = false -- Stop clipping AFTER options are hidden
		Container.ZIndex = baseZIndex -- Reset ZIndex AFTER options are hidden

		-- Clean up dismiss logic
		if currentDismissButton and currentDismissButton.Parent then
			currentDismissButton:Destroy()
			currentDismissButton = nil
		end
		if currentDismissConn then
			currentDismissConn:Disconnect()
			currentDismissConn = nil
		end

        -- Trigger callback if selection actually changed
		if triggerCallback and selectedIndex ~= oldIndex then
			 task.spawn(callback, selectedOptionText)
		end
	end

	local function selectOption(index, optionText)
        -- Pass true to trigger callback on selection
		closeDropdown(true, index, optionText)
	end

	local function buildOptions()
        -- Clear previous option buttons
		for _, child in ipairs(OptionsFrame:GetChildren()) do
			if child:IsA("TextButton") then
				child:Destroy()
			end
		end

        -- Handle case with no options
        if #options == 0 then
             OptionsFrame.CanvasSize = UDim2.new(0,0,0,0) -- Ensure canvas is zero
             OptionsFrame.Size = UDim2.new(1, 0, 0, 0) -- Collapse frame size
             return
        end

        -- Create new option buttons
		for index, optionText in ipairs(options) do
			local OptionButton = Instance.new("TextButton")
			OptionButton.Name = "Option_" .. index
			OptionButton.Size = UDim2.new(1, 0, 0, optionHeight) -- Size handled by layout + padding
			OptionButton.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
			OptionButton.BackgroundTransparency = 0.5
			OptionButton.BorderSizePixel = 0
			OptionButton.Font = Enum.Font.Gotham
			OptionButton.Text = optionText
			OptionButton.TextColor3 = Color3.fromRGB(200, 200, 200)
			OptionButton.TextSize = 14
			OptionButton.LayoutOrder = index
			OptionButton.AutoButtonColor = false
			OptionButton.Parent = OptionsFrame
            OptionButton.ZIndex = OptionsFrame.ZIndex + 1 -- Above options frame background

			OptionButton.MouseEnter:Connect(function() TweenService:Create(OptionButton, TweenInfo.new(0.1), {BackgroundTransparency = 0.2}):Play() end)
			OptionButton.MouseLeave:Connect(function() TweenService:Create(OptionButton, TweenInfo.new(0.1), {BackgroundTransparency = 0.5}):Play() end)

			OptionButton.MouseButton1Click:Connect(function()
				selectOption(index, optionText)
			end)
		end

		-- Calculate required size after population, respecting max height
        local neededHeight = OptionsLayout.AbsoluteContentSize.Y + OptionsPadding.PaddingTop.Offset + OptionsPadding.PaddingBottom.Offset
		local actualHeight = math.min(neededHeight, optionsVisibleMaxHeight)
		OptionsFrame.Size = UDim2.new(1, 0, 0, actualHeight)
        -- AutomaticCanvasSize handles CanvasSize based on content
	end

	DisplayButton.MouseButton1Click:Connect(function()
		if isOpen then
			closeDropdown(false) -- Close without triggering callback
		else
			-- Open Dropdown
			isOpen = true
            buildOptions() -- Ensure options are current before showing

            local openContainerZIndex = baseZIndex + 150 -- Define the high Z-index

			-- Set container state *before* making options visible
            Container.ZIndex = openContainerZIndex -- Bring container way up
            Container.ClipsDescendants = true -- Start clipping BEFORE showing options

			-- Now make options visible
            OptionsFrame.Visible = true
            OptionsFrame.CanvasPosition = Vector2.new() -- Reset scroll position

			DisplayButton.Text = selectedOptionText .. " ▲" -- Update button text

			-- Create dismiss overlay
			if currentDismissButton and currentDismissButton.Parent then currentDismissButton:Destroy() end
			if currentDismissConn then currentDismissConn:Disconnect() end

			currentDismissButton = Instance.new("TextButton")
			currentDismissButton.Name = "HydraDismissDropdown"
			currentDismissButton.Size = UDim2.new(1, 0, 1, 0)
            currentDismissButton.Position = UDim2.new(0,0,0,0)
			currentDismissButton.BackgroundTransparency = 1 -- Invisible
			currentDismissButton.Text = ""
			currentDismissButton.Modal = false -- Allow clicks to pass through if needed elsewhere? No, keep Modal false but ZIndex handles capture.
			currentDismissButton.ZIndex = openContainerZIndex - 1 -- Just below open container, above everything else
			currentDismissButton.Parent = screenGuiRef -- Parent to ScreenGui to cover everything

			currentDismissConn = currentDismissButton.MouseButton1Click:Connect(function()
                -- Clicked outside the dropdown options, close without triggering callback
                closeDropdown(false)
			end)
		end
	end)

	-- Initial build
	buildOptions()

	-- Setter function: programmatically set the dropdown value
	local function setter(optionValue)
		local found = false
		for i, v in ipairs(options) do
			if v == optionValue then
                if i ~= selectedIndex then -- Only update if selection changes
				    selectedIndex = i
				    selectedOptionText = v
				    DisplayButton.Text = selectedOptionText .. (isOpen and " ▲" or " ▼")
                    -- Do not trigger callback on programmatic set
                end
				found = true
				break
			end
		end
		return found
	end

	-- Refresher function: update the available options
	local function refresher(newOptions, keepCurrentSelection)
        options = newOptions or {}
        local currentSelectedValue = selectedOptionText
        local newSelectedIndex = 1 -- Default to first option
        local foundCurrent = false

        if keepCurrentSelection then
            for i,v in ipairs(options) do
                if v == currentSelectedValue then
                    newSelectedIndex = i
                    foundCurrent = true
                    break
                end
            end
        end

        selectedIndex = newSelectedIndex
        selectedOptionText = options[selectedIndex] or (#options > 0 and options[1] or "Select...")
		DisplayButton.Text = selectedOptionText .. (isOpen and " ▲" or " ▼")

		-- Rebuild options list; if dropdown is open, this will update it live
        buildOptions()

        -- If dropdown was open and the selected item was removed, close it
        if isOpen and keepCurrentSelection and not foundCurrent then
            closeDropdown(false)
        end
	end

	return Container, setter, refresher
end


--==============================================================================--
--                             LIBRARY MAIN METHODS                             --
--==============================================================================--

function HydraLib:MakeWindow(config)
	config = config or {}
	local window = {}
	setmetatable(window, {__index = HydraLib}) -- Allow calling HydraLib methods like Destroy on window

	window.Name = config.Name or "Hydra UI"
	window.Size = config.Size or UDim2.new(0, 450, 0, 400)
	window.Position = config.Position
	window._tabs = {}
	window._tabButtons = {}
	window._contentPages = {}
	window._activeTabName = nil
	window._closeCallback = config.CloseCallback or function() end
    window._baseZIndex = BASE_ZINDEX_COUNTER -- Assign base Z-index for this window
    BASE_ZINDEX_COUNTER += 200 -- Increment global counter significantly for next window (avoid overlap)

	window._screenGui = Instance.new("ScreenGui", CoreGui)
	window._screenGui.Name = "HydraLib_" .. window.Name:gsub("%s+", "")
    -- ZIndexBehavior.Sibling means ZIndex properties determine render order relative to siblings
	window._screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    -- DisplayOrder controls render order of ScreenGuis themselves. Higher renders later (on top).
    window._screenGui.DisplayOrder = window._baseZIndex
	window._screenGui.ResetOnSpawn = false
	table.insert(HydraLib._windows, window)

	window._mainFrame = Instance.new("Frame")
	window._mainFrame.Name = "MainWindow"
	window._mainFrame.Size = window.Size
	window._mainFrame.Position = window.Position or UDim2.new(0.5, -window.Size.X.Offset / 2, 0.5, -window.Size.Y.Offset / 2)
	window._mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	window._mainFrame.BorderSizePixel = 0
	window._mainFrame.ClipsDescendants = true
	window._mainFrame.Active = false -- Main frame doesn't need to capture input itself
	window._mainFrame.Visible = true
	window._mainFrame.Parent = window._screenGui
    window._mainFrame.ZIndex = window._baseZIndex -- Base Z for window elements within this ScreenGui
	local mainCorner = Instance.new("UICorner", window._mainFrame)
	mainCorner.CornerRadius = UDim.new(0, 12)

	local titleBar = Instance.new("Frame")
	titleBar.Name = "TitleBar"
	titleBar.Size = UDim2.new(1, 0, 0, 30)
	titleBar.Position = UDim2.new(0, 0, 0, 0)
	titleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	titleBar.BorderSizePixel = 0
	titleBar.Active = true -- TitleBar MUST be active for dragging
	titleBar.Parent = window._mainFrame
    titleBar.ZIndex = window._baseZIndex + 10 -- Higher than other window elements for input priority
	local titleCorner = Instance.new("UICorner", titleBar)
	titleCorner.CornerRadius = UDim.new(0, 12) -- Only top corners should be rounded? No, clip handles it.

	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "TitleText"
	titleLabel.Size = UDim2.new(1, -40, 1, 0)
	titleLabel.Position = UDim2.new(0, 10, 0, 0)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Font = Enum.Font.GothamBold
	titleLabel.Text = window.Name
	titleLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
	titleLabel.TextSize = 16
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.Parent = titleBar
    titleLabel.ZIndex = titleBar.ZIndex + 1 -- Above title bar background

	-- Dragging Logic
	local isDraggingWindow = false
	local windowDragStart = nil
	local windowStartPos = nil
	local windowDragMoveConnection = nil
	local windowDragReleaseConnection = nil

	titleBar.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and not isDraggingWindow then
			isDraggingWindow = true
			windowDragStart = input.Position
			windowStartPos = window._mainFrame.Position

			-- Disconnect previous connections if they somehow exist
			if windowDragMoveConnection then windowDragMoveConnection:Disconnect() end
			if windowDragReleaseConnection then windowDragReleaseConnection:Disconnect() end

			-- Use UserInputService for global tracking during drag
			windowDragMoveConnection = UserInputService.InputChanged:Connect(function(moveInput)
				if isDraggingWindow and (moveInput.UserInputType == Enum.UserInputType.MouseMovement or moveInput.UserInputType == Enum.UserInputType.Touch) then
					local delta = moveInput.Position - windowDragStart
					window._mainFrame.Position = UDim2.new(windowStartPos.X.Scale, windowStartPos.X.Offset + delta.X, windowStartPos.Y.Scale, windowStartPos.Y.Offset + delta.Y)
				end
			end)

			windowDragReleaseConnection = UserInputService.InputEnded:Connect(function(endInput)
				if isDraggingWindow and (endInput.UserInputType == Enum.UserInputType.MouseButton1 or endInput.UserInputType == Enum.UserInputType.Touch) then
					isDraggingWindow = false
					-- Disconnect listeners immediately on release
					if windowDragMoveConnection then windowDragMoveConnection:Disconnect(); windowDragMoveConnection = nil end
					if windowDragReleaseConnection then windowDragReleaseConnection:Disconnect(); windowDragReleaseConnection = nil end
				end
			end)
		end
	end)

	local closeButton = Instance.new("TextButton")
	closeButton.Name = "CloseButton"
	closeButton.Size = UDim2.new(0, 20, 0, 20)
	closeButton.Position = UDim2.new(1, -25, 0.5, -10)
	closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
	closeButton.BorderSizePixel = 0
	closeButton.Font = Enum.Font.SourceSansBold
	closeButton.Text = "X"
	closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	closeButton.TextSize = 14
	closeButton.AutoButtonColor = false
	closeButton.Parent = titleBar
    closeButton.ZIndex = titleBar.ZIndex + 1 -- Above title bar background
	local closeCorner = Instance.new("UICorner", closeButton)
	closeCorner.CornerRadius = UDim.new(0, 4)
	closeButton.MouseButton1Click:Connect(function()
		window:Destroy() -- Call the destroy method on the window object
	end)

	window._tabContainer = Instance.new("Frame")
	window._tabContainer.Name = "TabContainer"
	window._tabContainer.Size = UDim2.new(1, 0, 0, 35)
	window._tabContainer.Position = UDim2.new(0, 0, 0, titleBar.Size.Y.Offset)
	window._tabContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	window._tabContainer.BorderSizePixel = 0
    window._tabContainer.Active = false -- Doesn't need input
	window._tabContainer.Parent = window._mainFrame
    window._tabContainer.ZIndex = window._baseZIndex + 1 -- Above main frame background
	local tabListLayout = Instance.new("UIListLayout", window._tabContainer)
	tabListLayout.FillDirection = Enum.FillDirection.Horizontal
	tabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	tabListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	tabListLayout.Padding = UDim.new(0, 5)
	local tabPadding = Instance.new("UIPadding", window._tabContainer)
	tabPadding.PaddingLeft = UDim.new(0, 5)
	tabPadding.PaddingRight = UDim.new(0, 5)

	window._contentContainer = Instance.new("Frame")
	window._contentContainer.Name = "ContentContainer"
    -- Adjusted size calculation slightly for cleaner look
	window._contentContainer.Size = UDim2.new(1, -10, 1, -(titleBar.Size.Y.Offset + window._tabContainer.Size.Y.Offset + 10))
	window._contentContainer.Position = UDim2.new(0, 5, 0, titleBar.Size.Y.Offset + window._tabContainer.Size.Y.Offset + 5)
	window._contentContainer.BackgroundTransparency = 1
	window._contentContainer.BorderSizePixel = 0
	window._contentContainer.ClipsDescendants = true
    window._contentContainer.Active = false -- Doesn't need input itself
	window._contentContainer.Parent = window._mainFrame
    window._contentContainer.ZIndex = window._baseZIndex + 1 -- Above main frame background

	function window:_switchTab(targetTabName)
		if window._activeTabName == targetTabName then return end -- Don't switch if already active
		window._activeTabName = targetTabName

		for tabName, button in pairs(window._tabButtons) do
			local isActive = (tabName == targetTabName)
			local targetColor = isActive and Color3.fromRGB(0, 120, 255) or Color3.fromRGB(55, 55, 55)
			local targetTextColor = isActive and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(180, 180, 180)

            -- Check if button still exists before tweening
            if button and button.Parent then
			    TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = targetColor}):Play()
			    local textLabel = button:FindFirstChild("TextLabel")
			    if textLabel and textLabel.Parent then
				    TweenService:Create(textLabel, TweenInfo.new(0.2), {TextColor3 = targetTextColor}):Play()
			    end
            end

            -- Check if content page still exists
			if window._contentPages[tabName] and window._contentPages[tabName].Parent then
				 window._contentPages[tabName].Visible = isActive
                 if isActive then
                     -- Reset scroll position smoothly when tab becomes visible
                     TweenService:Create(window._contentPages[tabName], TweenInfo.new(0.1), {CanvasPosition = Vector2.new()}):Play()
                 end
			end
		end
	end

	return window
end

function HydraLib:MakeTab(config)
	config = config or {}
	local window = self -- 'self' here refers to the window object this method is called on
	if not window or not window._mainFrame then
		error("HydraLib Error: MakeTab must be called on a Window object created by MakeWindow.", 2)
		return
	end

	local tab = {}
    tab.Name = config.Name or "Tab" .. (#window._tabs + 1)
    local tabIdentifier = tab.Name:gsub("%s+", "") -- Sanitize name for instance names

	-- Prevent duplicate tab names within the same window
	if window._tabButtons[tab.Name] then
		warn("HydraLib Warning: Tab with name '" .. tab.Name .. "' already exists in this window. Skipping.")
		return
	end

	tab._window = window
	tab._layoutOrderCounter = 1 -- Counter for elements within this tab

	local tabButton = Instance.new("TextButton")
	tabButton.Name = tabIdentifier .. "TabButton"
	tabButton.Size = UDim2.new(0, 100, 0, 25)
	tabButton.BackgroundColor3 = Color3.fromRGB(55, 55, 55) -- Initial inactive color
	tabButton.BorderSizePixel = 0
	tabButton.LayoutOrder = #window._tabs + 1
	tabButton.Parent = window._tabContainer
	tabButton.AutoButtonColor = false
    tabButton.ZIndex = window._tabContainer.ZIndex + 1 -- Above tab container background
	local tabCorner = Instance.new("UICorner", tabButton)
	tabCorner.CornerRadius = UDim.new(0, 6)

	local tabTextLabel = Instance.new("TextLabel", tabButton)
	tabTextLabel.Name = "TextLabel"
	tabTextLabel.Size = UDim2.new(1, 0, 1, 0)
	tabTextLabel.BackgroundTransparency = 1
	tabTextLabel.Text = tab.Name
	tabTextLabel.TextColor3 = Color3.fromRGB(180, 180, 180) -- Initial inactive color
	tabTextLabel.Font = Enum.Font.GothamSemibold
	tabTextLabel.TextSize = 14
    tabTextLabel.ZIndex = tabButton.ZIndex + 1 -- Above button background

	window._tabButtons[tab.Name] = tabButton -- Store by actual name

	tab._contentPage = Instance.new("ScrollingFrame")
	tab._contentPage.Name = tabIdentifier .. "ContentPage"
	tab._contentPage.Size = UDim2.new(1, 0, 1, 0)
	tab._contentPage.Position = UDim2.new(0, 0, 0, 0)
	tab._contentPage.BackgroundTransparency = 1
	tab._contentPage.BorderSizePixel = 0
	tab._contentPage.Visible = false -- Initially hidden
	tab._contentPage.ClipsDescendants = false -- Let content overflow vertically for scrolling
	tab._contentPage.Parent = window._contentContainer
	tab._contentPage.CanvasSize = UDim2.new(0, 0, 0, 0) -- AutoSize Y handles this
	tab._contentPage.ScrollBarThickness = 6
	tab._contentPage.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
	tab._contentPage.ScrollingDirection = Enum.ScrollingDirection.Y
	tab._contentPage.AutomaticCanvasSize = Enum.AutomaticSize.Y -- Automatically size canvas based on content
	tab._contentPage.CanvasPosition = Vector2.new()
    tab._contentPage.ZIndex = window._contentContainer.ZIndex + 1 -- Above content container background

	local contentPadding = Instance.new("UIPadding", tab._contentPage)
	contentPadding.PaddingTop = UDim.new(0, 10)
	contentPadding.PaddingBottom = UDim.new(0, 10)
	contentPadding.PaddingLeft = UDim.new(0, 10)
	contentPadding.PaddingRight = UDim.new(0, 10)

	tab._contentLayout = Instance.new("UIListLayout", tab._contentPage)
	tab._contentLayout.Padding = UDim.new(0, 15) -- Spacing between elements
	tab._contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
	tab._contentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center -- Center content? Or Left? Keep Left.
    tab._contentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    tab._contentLayout.FillDirection = Enum.FillDirection.Vertical -- Ensure vertical layout

	window._contentPages[tab.Name] = tab._contentPage -- Store by actual name
	table.insert(window._tabs, tab) -- Store the tab object itself

	-- Define element adder methods directly on this tab object
	function tab:AddSlider(sliderConfig)
		if not self or not self._contentPage then error("Internal error: AddSlider called on invalid object.", 2) return end
		sliderConfig = sliderConfig or {}
		sliderConfig._LayoutOrder = self._layoutOrderCounter
		self._layoutOrderCounter = self._layoutOrderCounter + 1
        -- Pass the window's base ZIndex + small offset (though slider doesn't use it internally currently)
		local element, setter = _createSlider(self._contentPage, sliderConfig)
		return { Type = "Slider", Element = element, Set = setter }
	end

	function tab:AddToggle(toggleConfig)
		if not self or not self._contentPage then error("Internal error: AddToggle called on invalid object.", 2) return end
		toggleConfig = toggleConfig or {}
		toggleConfig._LayoutOrder = self._layoutOrderCounter
		self._layoutOrderCounter = self._layoutOrderCounter + 1
        -- Pass the window's base ZIndex + small offset (though toggle doesn't use it internally currently)
		local element, setter = _createToggle(self._contentPage, toggleConfig)
		return { Type = "Toggle", Element = element, Set = setter }
	end

	function tab:AddDropdown(dropdownConfig)
		if not self or not self._contentPage then error("Internal error: AddDropdown called on invalid object.", 2) return end
		dropdownConfig = dropdownConfig or {}
		dropdownConfig._LayoutOrder = self._layoutOrderCounter
		self._layoutOrderCounter = self._layoutOrderCounter + 1
        -- Pass the window's screenGui and a base ZIndex *relative* to the window's base for the dropdown
        -- Give dropdowns a higher base (+20) within the window to ensure they are above sliders/toggles etc.
		local element, setter, refresher = _createDropdown(self._contentPage, dropdownConfig, self._window._screenGui, self._window._baseZIndex + 20)
		return { Type = "Dropdown", Element = element, Set = setter, Refresh = refresher }
	end

	tabButton.MouseButton1Click:Connect(function()
        if window and window._switchTab then -- Ensure window still exists
		    window:_switchTab(tab.Name)
        end
	end)

	-- Activate the first tab automatically if it's the only one
	if #window._tabs == 1 then
        -- Use task.defer to ensure the rest of the UI setup completes before switching
		task.defer(function()
            if window and window._switchTab then -- Check again in case window destroyed quickly
                window:_switchTab(window, tab.Name)
            end
        end)
	end

	return tab
end

--==============================================================================--
--                             LIBRARY UTILITIES                                --
--==============================================================================--

function HydraLib:Destroy()
	if self == HydraLib then
		-- Static call: Destroy all tracked windows
		-- Iterate backwards as removing elements shifts indices
		for i = #HydraLib._windows, 1, -1 do
			local window = HydraLib._windows[i]
            -- Check if it's a valid window object with a Destroy method
			if type(window) == "table" and window.Destroy and window._screenGui then
                -- Call the Destroy method *on the window object itself*
				pcall(window.Destroy, window)
            else
                -- If something invalid is in the list, remove it anyway
                table.remove(HydraLib._windows, i)
            end
		end
        HydraLib._windows = {} -- Clear the tracking table completely
		BASE_ZINDEX_COUNTER = 1 -- Reset counter
        print("HydraLib: All windows destroyed.")
	else
		-- Instance call: Assume 'self' is a window object calling its own Destroy method
		local window = self
		if window and window._screenGui and window._screenGui.Parent then
			-- Remove this window from the global tracking table first
            local found = false
			for i, w in ipairs(HydraLib._windows) do
				if w == window then
					table.remove(HydraLib._windows, i)
                    found = true
					break
				end
			end

            -- Safely call user's close callback
			pcall(window._closeCallback)

            -- Destroy the ScreenGui, which removes all descendants
			window._screenGui:Destroy()

            -- Nil out references within the window object to help GC
            for k, _ in pairs(window) do
                window[k] = nil
            end
            -- print("HydraLib: Window '" .. (window.Name or "Unnamed") .. "' destroyed.") -- window.Name is now nil
		end
	end
end

-- Expose the main library object
return HydraLib
